This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    create-branch.yml
    issue-autolink.yml
    lint.yml
    release-please.yml
  FUNDING.yml
  issue-branch.yml
  pull_request_template.md
.husky/
  commit-msg
  post-merge
  pre-commit
public/
  favicon/
    site.webmanifest
  svg/
    Logo.svg
    Vercel.svg
src/
  __mocks__/
    svg.tsx
  __tests__/
    pages/
      HomePage.test.tsx
  components/
    admin/
      AdminTeamsManager.tsx
    buttons/
      Button.tsx
      IconButton.tsx
      TextButton.tsx
    home/
      Hero.tsx
      HomePageContent.tsx
    layout/
      Footer.tsx
      Header.tsx
      Layout.tsx
    leaderboard/
      LeaderboardPageContent.tsx
      LeaderboardTable.tsx
      TeamRow.tsx
    links/
      ArrowLink.tsx
      ButtonLink.tsx
      IconLink.tsx
      PrimaryLink.tsx
      UnderlineLink.tsx
      UnstyledLink.tsx
    scoring/
      HoleInput.tsx
      ScoreInputForm.tsx
    ui/
      select.tsx
    NextImage.tsx
    Skeleton.tsx
  constant/
    config.ts
    env.ts
  lib/
    __tests__/
      og.test.ts
    env.ts
    helper.ts
    logger.ts
    og.ts
    utils.ts
  pages/
    _app.tsx
    AdminTeamsPage.tsx
    index.tsx
    LeaderboardPage.tsx
    ScoreInputPage.tsx
  styles/
    colors.css
    globals.css
.eslintrc.js
.gitignore
.npmrc
.nvmrc
.prettierignore
.prettierrc.js
CHANGELOG.md
commitlint.config.js
components.json
jest.config.js
jest.setup.js
next-sitemap.config.js
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
vercel.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/create-branch.yml">
name: Create Branch from Issue

on:
  issues:
    types: [assigned]

jobs:
  create_issue_branch_job:
    runs-on: ubuntu-latest
    steps:
      - name: Create Issue Branch
        uses: robvanderleek/create-issue-branch@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".github/workflows/release-please.yml">
name: release-please
on:
  # !STARTERCONF Choose your preferred event
  # !Option 1: Manual Trigger from GitHub
  workflow_dispatch:
  # !Option 2: Release on every push on main branch
  # push:
  #   branches:
  #     - main
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          release-type: node
          package-name: release-please-action
</file>

<file path=".github/FUNDING.yml">
# !STARTERCONF You can delete this file :) Your support is much appreciated!
# These are supported funding model platforms

github: theodorusclarence
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi: # Replace with a single Ko-fi username
tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
otechie: # Replace with a single Otechie username
lfx_crowdfunding: # Replace with a single LFX Crowdfunding project-name e.g., cloud-foundry
custom: ['https://saweria.co/theodorusclarence']
</file>

<file path=".github/issue-branch.yml">
# https://github.com/robvanderleek/create-issue-branch#option-2-configure-github-action

# ex: i4-lower_camel_upper
branchName: 'i${issue.number}-${issue.title,}'
branches:
  - label: epic
    skip: true
  - label: debt
    skip: true
</file>

<file path=".husky/commit-msg">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx --no-install commitlint --edit "$1"
</file>

<file path=".husky/pre-commit">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged
</file>

<file path="public/favicon/site.webmanifest">
{
  "name": "",
  "short_name": "",
  "icons": [
    {
      "src": "/favicon/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/favicon/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}
</file>

<file path="public/svg/Vercel.svg">
<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>Vercel</title><path d="M24 22.525H0l12-21.05 12 21.05z"/></svg>
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/constant/env.ts">
export const isProd = process.env.NODE_ENV === 'production';
export const isLocal = process.env.NODE_ENV === 'development';

export const showLogger = isLocal
  ? true
  : process.env.NEXT_PUBLIC_SHOW_LOGGER === 'true' ?? false;
</file>

<file path="src/lib/logger.ts">
/* eslint-disable no-console */
import { showLogger } from '@/constant/env';

/**
 * A logger function that will only logs on development
 * @param object - The object to log
 * @param comment - Autogenerated with `lg` snippet
 */
export default function logger(object: unknown, comment?: string): void {
  if (!showLogger) return;

  console.log(
    '%c ============== INFO LOG \n',
    'color: #22D3EE',
    `${typeof window !== 'undefined' && window?.location.pathname}\n`,
    `=== ${comment ?? ''}\n`,
    object
  );
}
</file>

<file path=".eslintrc.js">
module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  plugins: ['@typescript-eslint', 'simple-import-sort', 'unused-imports'],
  extends: [
    'eslint:recommended',
    'next',
    'next/core-web-vitals',
    'plugin:@typescript-eslint/recommended',
    'prettier',
  ],
  rules: {
    'no-unused-vars': 'off',
    'no-console': 'warn',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    'react/no-unescaped-entities': 'off',

    'react/display-name': 'off',
    'react/jsx-curly-brace-presence': [
      'warn',
      { props: 'never', children: 'never' },
    ],

    //#region  //*=========== Unused Import ===========
    '@typescript-eslint/no-unused-vars': 'off',
    'unused-imports/no-unused-imports': 'warn',
    'unused-imports/no-unused-vars': [
      'warn',
      {
        vars: 'all',
        varsIgnorePattern: '^_',
        args: 'after-used',
        argsIgnorePattern: '^_',
      },
    ],
    //#endregion  //*======== Unused Import ===========

    //#region  //*=========== Import Sort ===========
    'simple-import-sort/exports': 'warn',
    'simple-import-sort/imports': [
      'warn',
      {
        groups: [
          // ext library & side effect imports
          ['^@?\\w', '^\\u0000'],
          // {s}css files
          ['^.+\\.s?css$'],
          // Lib and hooks
          ['^@/lib', '^@/hooks'],
          // static data
          ['^@/data'],
          // components
          ['^@/components', '^@/container'],
          // zustand store
          ['^@/store'],
          // Other imports
          ['^@/'],
          // relative paths up until 3 level
          [
            '^\\./?$',
            '^\\.(?!/?$)',
            '^\\.\\./?$',
            '^\\.\\.(?!/?$)',
            '^\\.\\./\\.\\./?$',
            '^\\.\\./\\.\\.(?!/?$)',
            '^\\.\\./\\.\\./\\.\\./?$',
            '^\\.\\./\\.\\./\\.\\.(?!/?$)',
          ],
          ['^@/types'],
          // other that didnt fit in
          ['^'],
        ],
      },
    ],
    //#endregion  //*======== Import Sort ===========
  },
  globals: {
    React: true,
    JSX: true,
  },
};
</file>

<file path=".prettierrc.js">
module.exports = {
  arrowParens: 'always',
  singleQuote: true,
  jsxSingleQuote: true,
  tabWidth: 2,
  semi: true,
};
</file>

<file path="commitlint.config.js">
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    //   TODO Add Scope Enum Here
    // 'scope-enum': [2, 'always', ['yourscope', 'yourscope']],
    'type-enum': [
      2,
      'always',
      [
        'feat',
        'fix',
        'docs',
        'chore',
        'style',
        'refactor',
        'ci',
        'test',
        'perf',
        'revert',
        'vercel',
      ],
    ],
  },
};
</file>

<file path="jest.setup.js">
import '@testing-library/jest-dom/extend-expect';

// Allow router mocks.
// eslint-disable-next-line no-undef
jest.mock('next/router', () => require('next-router-mock'));
</file>

<file path="next-sitemap.config.js">
/**
 * @type {import('next-sitemap').IConfig}
 * @see https://github.com/iamvishnusankar/next-sitemap#readme
 */
module.exports = {
  // !STARTERCONF Change the siteUrl
  /** Without additional '/' on the end, e.g. https://theodorusclarence.com */
  siteUrl: 'https://tsnext-tw.thcl.dev',
  generateRobotsTxt: true,
  robotsTxtOptions: {
    policies: [{ userAgent: '*', allow: '/' }],
  },
};
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="vercel.json">
{
  "headers": [
    {
      "source": "/fonts/inter-var-latin.woff2",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    }
  ]
}
</file>

<file path=".github/pull_request_template.md">
# Description & Technical Solution

Describe problems, if any, clearly and concisely.
Summarize the impact to the system.
Please also include relevant motivation and context.
Please include a summary of the technical solution and how it solves the problem.

# Checklist

- [ ] I have commented my code, particularly in hard-to-understand areas.
- [ ] Already rebased against main branch.

# Screenshots

Provide screenshots or videos of the changes made if any.
</file>

<file path=".husky/post-merge">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

pnpm install
</file>

<file path="public/svg/Logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="#FFAC33" d="M32.938 15.651C32.792 15.26 32.418 15 32 15H19.925L26.89 1.458c.219-.426.106-.947-.271-1.243C26.437.071 26.218 0 26 0c-.233 0-.466.082-.653.243L18 6.588 3.347 19.243c-.316.273-.43.714-.284 1.105S3.582 21 4 21h12.075L9.11 34.542c-.219.426-.106.947.271 1.243.182.144.401.215.619.215.233 0 .466-.082.653-.243L18 29.412l14.653-12.655c.317-.273.43-.714.285-1.106z"/></svg>
</file>

<file path="src/__mocks__/svg.tsx">
import React, { SVGProps } from 'react';

const SvgrMock = React.forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(
  (props, ref) => <svg ref={ref} {...props} />
);

export const ReactComponent = SvgrMock;
export default SvgrMock;
</file>

<file path="src/__tests__/pages/HomePage.test.tsx">
// !STARTERCONF You should delete this page

import { render, screen } from '@testing-library/react';

import HomePage from '@/app/page';

describe('Homepage', () => {
  it('renders the Components', () => {
    render(<HomePage />);

    const heading = screen.getByText(/A starter for Next.js/i);

    expect(heading).toBeInTheDocument();
  });
});
</file>

<file path="src/components/admin/AdminTeamsManager.tsx">
import { Edit, Mail, Plus, Save, Trash2, X } from 'lucide-react';
import React, { useState } from 'react';

interface Player {
  id: number;
  name: string;
  email: string;
  handicap: number;
  mulligansLeft: number;
}
interface Team {
  id: number;
  name: string;
  players: Player[];
  handicap: number;
}
export function AdminTeamsManager() {
  // console.log('Rendering AdminTeamsManager component'); // REMOVE

  // Mock data for teams - replace with API data fetching
  const [teams, setTeams] = useState<Team[]>([
    {
      id: 1,
      name: 'Team Alpha',
      handicap: 5,
      players: [
        {
          id: 1,
          name: 'John Smith',
          email: 'john@example.com',
          handicap: 3,
          mulligansLeft: 3,
        },
        {
          id: 2,
          name: 'Jane Doe',
          email: 'jane@example.com',
          handicap: 2,
          mulligansLeft: 3,
        },
      ],
    },
    {
      id: 2,
      name: 'Team Beta',
      handicap: 7,
      players: [
        {
          id: 3,
          name: 'Mike Johnson',
          email: 'mike@example.com',
          handicap: 4,
          mulligansLeft: 3,
        },
        {
          id: 4,
          name: 'Sarah Williams',
          email: 'sarah@example.com',
          handicap: 3,
          mulligansLeft: 3,
        },
      ],
    },
  ]);
  // State for controlling the visibility and data of the 'Add New Team' form
  const [isAddingTeam, setIsAddingTeam] = useState(false);
  const [newTeam, setNewTeam] = useState({
    name: '',
    handicap: 0,
    players: [
      {
        name: '',
        email: '',
        handicap: 0,
        mulligansLeft: 3,
      },
      {
        name: '',
        email: '',
        handicap: 0,
        mulligansLeft: 3,
      },
    ],
  });
  // State for controlling the visibility and data of the 'Edit Team' form
  const [editingTeamId, setEditingTeamId] = useState<number | null>(null);
  const [editingTeam, setEditingTeam] = useState<Team | null>(null);
  // Generic handler for top-level fields in the new team form (name, handicap)
  const handleNewTeamChange = (field: string, value: string | number) => {
    setNewTeam({
      ...newTeam,
      [field]: value,
    });
  };
  // Handler for nested player fields within the new team form
  const handleNewPlayerChange = (
    index: number,
    field: string,
    value: string | number,
  ) => {
    const updatedPlayers = [...newTeam.players];
    updatedPlayers[index] = {
      ...updatedPlayers[index],
      [field]: value,
    };
    setNewTeam({
      ...newTeam,
      players: updatedPlayers,
    });
  };
  // Generic handler for top-level fields in the editing team form
  const handleEditTeamChange = (field: string, value: string | number) => {
    if (!editingTeam) return;
    setEditingTeam({
      ...editingTeam,
      [field]: value,
    });
  };
  // Handler for nested player fields within the editing team form
  const handleEditPlayerChange = (
    index: number,
    field: string,
    value: string | number,
  ) => {
    if (!editingTeam) return;
    const updatedPlayers = [...editingTeam.players];
    updatedPlayers[index] = {
      ...updatedPlayers[index],
      [field]: value,
    };
    setEditingTeam({
      ...editingTeam,
      players: updatedPlayers,
    });
  };
  // Adds the team from the newTeam state to the main teams list
  const handleAddTeam = () => {
    // Validate form
    if (!newTeam.name.trim()) {
      alert('Team name is required');
      return;
    }
    if (
      newTeam.players.some(
        (player) => !player.name.trim() || !player.email.trim(),
      )
    ) {
      alert('Player name and email are required');
      return;
    }
    // Create new team with ID, and add IDs to players
    const teamWithPlayerIds: Team = {
      id: Date.now(), // Team ID
      name: newTeam.name,
      handicap: newTeam.handicap,
      players: newTeam.players.map((player) => ({
        ...player,
        id: Date.now() + Math.random(), // Simple unique ID for player
      })),
    };
    // Add to teams
    setTeams([...teams, teamWithPlayerIds]);
    // Reset form
    setNewTeam({
      name: '',
      handicap: 0,
      players: [
        {
          name: '',
          email: '',
          handicap: 0,
          mulligansLeft: 3,
        },
        {
          name: '',
          email: '',
          handicap: 0,
          mulligansLeft: 3,
        },
      ],
    });
    setIsAddingTeam(false);
  };
  // Sets the component into editing mode for a specific team
  const handleEditStart = (team: Team) => {
    setEditingTeamId(team.id);
    setEditingTeam({
      ...team,
    });
  };
  // Saves the changes from the editingTeam state back to the main teams list
  const handleSaveEdit = () => {
    if (!editingTeam) return;
    // Validate form
    if (!editingTeam.name.trim()) {
      alert('Team name is required');
      return;
    }
    if (
      editingTeam.players.some(
        (player) => !player.name.trim() || !player.email.trim(),
      )
    ) {
      alert('Player name and email are required');
      return;
    }
    // Update team in array
    setTeams(
      teams.map((team) => (team.id === editingTeam.id ? editingTeam : team)),
    );
    // Reset editing state
    setEditingTeamId(null);
    setEditingTeam(null);
  };
  // Resets the editing state without saving changes
  const handleCancelEdit = () => {
    setEditingTeamId(null);
    setEditingTeam(null);
  };
  // Removes a team from the list after confirmation
  const handleDeleteTeam = (teamId: number) => {
    if (confirm('Are you sure you want to delete this team?')) {
      setTeams(teams.filter((team) => team.id !== teamId));
    }
  };
  // Placeholder for sending player invitation emails (future API call)
  const handleSendInvitation = (email: string) => {
    alert(`Invitation sent to ${email}`);
    // In a real app, this would send an API request
  };
  return (
    <div className='max-w-5xl mx-auto'>
      <div className='flex justify-between items-center mb-6'>
        <h2 className='text-2xl font-bold text-[#0B3D2E]'>Teams</h2>
        <button
          onClick={() => setIsAddingTeam(true)}
          className='flex items-center bg-[#0B3D2E] text-white px-4 py-2 rounded-md hover:bg-[#0a3528] transition-colors'
          disabled={isAddingTeam}
        >
          <Plus size={18} className='mr-2' />
          Add Team
        </button>
      </div>
      {/* New Team Form */}
      {isAddingTeam && (
        <div className='bg-white rounded-lg shadow-md mb-6 p-6'>
          <h3 className='text-xl font-bold mb-4'>Add New Team</h3>
          <div className='mb-4'>
            <label className='block text-sm font-medium text-gray-700 mb-1'>
              Team Name
            </label>
            <input
              type='text'
              value={newTeam.name}
              onChange={(e) => handleNewTeamChange('name', e.target.value)}
              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
              placeholder='Enter team name'
            />
          </div>
          <div className='mb-4'>
            <label className='block text-sm font-medium text-gray-700 mb-1'>
              Team Handicap
            </label>
            <input
              type='number'
              value={newTeam.handicap}
              onChange={(e) =>
                handleNewTeamChange('handicap', parseInt(e.target.value) || 0)
              }
              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
              placeholder='Enter team handicap'
            />
          </div>
          <div className='mb-6'>
            <h4 className='text-lg font-medium mb-2'>Players</h4>
            {newTeam.players.map((player, index) => (
              <div key={index} className='bg-gray-50 p-4 rounded-md mb-3'>
                <h5 className='font-medium mb-2'>Player {index + 1}</h5>
                <div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-2'>
                  <div>
                    <label className='block text-sm font-medium text-gray-700 mb-1'>
                      Name
                    </label>
                    <input
                      type='text'
                      value={player.name}
                      onChange={(e) =>
                        handleNewPlayerChange(index, 'name', e.target.value)
                      }
                      className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                      placeholder='Enter player name'
                    />
                  </div>
                  <div>
                    <label className='block text-sm font-medium text-gray-700 mb-1'>
                      Email
                    </label>
                    <input
                      type='email'
                      value={player.email}
                      onChange={(e) =>
                        handleNewPlayerChange(index, 'email', e.target.value)
                      }
                      className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                      placeholder='Enter player email'
                    />
                  </div>
                </div>
                <div>
                  <label className='block text-sm font-medium text-gray-700 mb-1'>
                    Individual Handicap
                  </label>
                  <input
                    type='number'
                    value={player.handicap}
                    onChange={(e) =>
                      handleNewPlayerChange(
                        index,
                        'handicap',
                        parseInt(e.target.value) || 0,
                      )
                    }
                    className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                    placeholder='Enter player handicap'
                  />
                </div>
              </div>
            ))}
          </div>
          <div className='flex justify-end space-x-3'>
            <button
              onClick={() => setIsAddingTeam(false)}
              className='px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors'
            >
              Cancel
            </button>
            <button
              onClick={handleAddTeam}
              className='bg-[#0B3D2E] text-white px-4 py-2 rounded-md hover:bg-[#0a3528] transition-colors'
            >
              Add Team
            </button>
          </div>
        </div>
      )}
      {/* Teams List */}
      <div className='space-y-4'>
        {teams.length === 0 ? (
          <div className='bg-white rounded-lg shadow-md p-6 text-center text-gray-500'>
            No teams added yet. Click "Add Team" to create a new team.
          </div>
        ) : (
          teams.map((team) => (
            <div
              key={team.id}
              className='bg-white rounded-lg shadow-md overflow-hidden'
            >
              {editingTeamId === team.id ? (
                // Editing mode
                <div className='p-6'>
                  <div className='mb-4'>
                    <label className='block text-sm font-medium text-gray-700 mb-1'>
                      Team Name
                    </label>
                    <input
                      type='text'
                      value={editingTeam?.name}
                      onChange={(e) =>
                        handleEditTeamChange('name', e.target.value)
                      }
                      className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                    />
                  </div>
                  <div className='mb-4'>
                    <label className='block text-sm font-medium text-gray-700 mb-1'>
                      Team Handicap
                    </label>
                    <input
                      type='number'
                      value={editingTeam?.handicap}
                      onChange={(e) =>
                        handleEditTeamChange(
                          'handicap',
                          parseInt(e.target.value) || 0,
                        )
                      }
                      className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                    />
                  </div>
                  <div className='mb-6'>
                    <h4 className='text-lg font-medium mb-2'>Players</h4>
                    {editingTeam?.players.map((player, index) => (
                      <div
                        key={index}
                        className='bg-gray-50 p-4 rounded-md mb-3'
                      >
                        <h5 className='font-medium mb-2'>Player {index + 1}</h5>
                        <div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-2'>
                          <div>
                            <label className='block text-sm font-medium text-gray-700 mb-1'>
                              Name
                            </label>
                            <input
                              type='text'
                              value={player.name}
                              onChange={(e) =>
                                handleEditPlayerChange(
                                  index,
                                  'name',
                                  e.target.value,
                                )
                              }
                              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                            />
                          </div>
                          <div>
                            <label className='block text-sm font-medium text-gray-700 mb-1'>
                              Email
                            </label>
                            <input
                              type='email'
                              value={player.email}
                              onChange={(e) =>
                                handleEditPlayerChange(
                                  index,
                                  'email',
                                  e.target.value,
                                )
                              }
                              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                            />
                          </div>
                        </div>
                        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                          <div>
                            <label className='block text-sm font-medium text-gray-700 mb-1'>
                              Individual Handicap
                            </label>
                            <input
                              type='number'
                              value={player.handicap}
                              onChange={(e) =>
                                handleEditPlayerChange(
                                  index,
                                  'handicap',
                                  parseInt(e.target.value) || 0,
                                )
                              }
                              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                            />
                          </div>
                          <div>
                            <label className='block text-sm font-medium text-gray-700 mb-1'>
                              Mulligans Left
                            </label>
                            <input
                              type='number'
                              value={player.mulligansLeft}
                              onChange={(e) =>
                                handleEditPlayerChange(
                                  index,
                                  'mulligansLeft',
                                  parseInt(e.target.value) || 0,
                                )
                              }
                              className='w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className='flex justify-end space-x-3'>
                    <button
                      onClick={handleCancelEdit}
                      className='flex items-center px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors'
                    >
                      <X size={18} className='mr-2' />
                      Cancel
                    </button>
                    <button
                      onClick={handleSaveEdit}
                      className='flex items-center bg-[#0B3D2E] text-white px-4 py-2 rounded-md hover:bg-[#0a3528] transition-colors'
                    >
                      <Save size={18} className='mr-2' />
                      Save Changes
                    </button>
                  </div>
                </div>
              ) : (
                // View mode
                <>
                  <div className='bg-[#0B3D2E] text-white px-6 py-4 flex justify-between items-center'>
                    <h3 className='text-xl font-bold'>{team.name}</h3>
                    <div className='text-sm'>
                      Team Handicap: {team.handicap}
                    </div>
                  </div>
                  <div className='p-6'>
                    <h4 className='text-lg font-medium mb-3'>Players</h4>
                    <div className='space-y-3'>
                      {team.players.map((player) => (
                        <div
                          key={player.id}
                          className='bg-gray-50 p-4 rounded-md flex flex-col md:flex-row md:justify-between md:items-center'
                        >
                          <div className='mb-2 md:mb-0'>
                            <div className='font-medium'>{player.name}</div>
                            <div className='text-sm text-gray-600'>
                              {player.email}
                            </div>
                          </div>
                          <div className='flex flex-col md:flex-row gap-2 md:items-center'>
                            <div className='text-sm bg-gray-200 px-3 py-1 rounded-full'>
                              Handicap: {player.handicap}
                            </div>
                            <div className='text-sm bg-gray-200 px-3 py-1 rounded-full'>
                              Mulligans: {player.mulligansLeft}
                            </div>
                            <button
                              onClick={() => handleSendInvitation(player.email)}
                              className='flex items-center text-sm text-[#0B3D2E] hover:text-[#0a3528]'
                            >
                              <Mail size={16} className='mr-1' />
                              Invite
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className='flex justify-end space-x-3 mt-4'>
                      <button
                        onClick={() => handleDeleteTeam(team.id)}
                        className='flex items-center text-red-600 px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors'
                      >
                        <Trash2 size={18} className='mr-2' />
                        Delete
                      </button>
                      <button
                        onClick={() => handleEditStart(team)}
                        className='flex items-center bg-[#0B3D2E] text-white px-4 py-2 rounded-md hover:bg-[#0a3528] transition-colors'
                      >
                        <Edit size={18} className='mr-2' />
                        Edit
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/components/home/Hero.tsx">
import Link from 'next/link';
import React from 'react';

export function Hero() {
  return (
    <section className='bg-[#0B3D2E] text-white py-16 md:py-24'>
      <div className='container mx-auto px-4'>
        <div className='max-w-3xl mx-auto text-center'>
          <h1 className='text-4xl md:text-5xl lg:text-6xl font-bold mb-6'>
            2023 Golf Tournament
          </h1>
          <p className='text-xl md:text-2xl mb-8'>
            June 15-17, 2023 • Pebble Creek Golf Club
          </p>
          <div className='flex flex-col sm:flex-row justify-center gap-4'>
            <Link
              href='/leaderboard'
              className='bg-white text-[#0B3D2E] px-6 py-3 rounded-md font-medium hover:bg-gray-100 transition-colors'
            >
              View Leaderboard
            </Link>
            <Link
              href='/register'
              className='bg-transparent border-2 border-white text-white px-6 py-3 rounded-md font-medium hover:bg-white/10 transition-colors'
            >
              Join Team
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/home/HomePageContent.tsx">
import React from 'react';

const HomePageContent = () => {
  return (
    <div className='flex flex-col items-center justify-center min-h-screen py-2'>
      <h1 className='text-6xl font-bold text-primary'>Tournament Name</h1>
      <p className='mt-3 text-2xl text-gray-700'>Date | Location</p>
      {/* Add buttons for Join Team / View Leaderboard later */}
      {/* Add Login/Register buttons later */}
    </div>
  );
};

export default HomePageContent;
</file>

<file path="src/components/layout/Footer.tsx">
import React from 'react';

export function Footer() {
  const currentYear = new Date().getFullYear();
  return (
    <footer className='bg-[#0B3D2E] text-white py-6'>
      <div className='container mx-auto px-4 text-center'>
        <p className='text-sm'>Golf Tournament App &copy; {currentYear}</p>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/leaderboard/LeaderboardPageContent.tsx">
import React from 'react';

// Placeholder data structure for a team on the leaderboard
interface LeaderboardTeam {
  id: number;
  name: string;
  grossScore: number; // Relative to par, e.g., -2, 0, 5
  netScore: number; // Adjusted for handicap
  thru: string; // e.g., "9", "18", "F"
  mulligansRemaining: number;
  // Add expanded details later: holeScores, driveCounts, playerMulligans
}

const LeaderboardPageContent = () => {
  // Placeholder leaderboard data - replace with actual data fetching
  const leaderboardData: LeaderboardTeam[] = [
    {
      id: 1,
      name: 'Marc & Luke',
      grossScore: -2,
      netScore: -4,
      thru: '18',
      mulligansRemaining: 2,
    },
    {
      id: 2,
      name: 'Team Bogey',
      grossScore: 5,
      netScore: 5,
      thru: '15',
      mulligansRemaining: 4,
    },
    {
      id: 3,
      name: 'Fairway Friends',
      grossScore: 0,
      netScore: -1,
      thru: 'F',
      mulligansRemaining: 1,
    },
  ];

  // Function to determine score color
  const getScoreColor = (score: number): string => {
    if (score < 0) return 'text-green-500'; // Under par
    if (score > 0) return 'text-red-500'; // Over par
    return 'text-black'; // Even par
  };

  return (
    <div className='container mx-auto px-4 py-8'>
      <h1 className='text-4xl font-bold text-center mb-8 text-primary'>
        Leaderboard
      </h1>

      {/* Leaderboard Table/List - Placeholder */}
      <div className='bg-white shadow-md rounded-lg overflow-hidden'>
        {/* Header Row - Optional */}
        <div className='hidden md:flex bg-gray-200 text-gray-700 uppercase text-sm leading-normal'>
          <div className='py-3 px-6 text-left w-1/4'>Team</div>
          <div className='py-3 px-6 text-center w-1/4'>Gross</div>
          <div className='py-3 px-6 text-center w-1/4'>Net</div>
          <div className='py-3 px-6 text-center w-1/4'>Thru</div>
          <div className='py-3 px-6 text-center w-1/4'>Mulligans Left</div>
        </div>

        {/* Team Rows */}
        <div className='divide-y divide-gray-200'>
          {leaderboardData
            .sort((a, b) => a.grossScore - b.grossScore) // Sort by gross score
            .map((team) => (
              <div key={team.id} className='hover:bg-gray-50'>
                {/* Basic Row - Adapt for mobile and expansion */}
                <div className='flex flex-wrap md:flex-nowrap items-center py-4 px-6'>
                  <div className='w-full md:w-1/4 mb-2 md:mb-0 font-medium text-gray-800'>
                    {team.name}
                  </div>
                  <div
                    className={`w-1/3 md:w-1/4 text-center font-semibold ${getScoreColor(team.grossScore)}`}
                  >
                    {team.grossScore > 0
                      ? `+${team.grossScore}`
                      : team.grossScore === 0
                        ? 'E'
                        : team.grossScore}
                  </div>
                  <div
                    className={`w-1/3 md:w-1/4 text-center ${getScoreColor(team.netScore)}`}
                  >
                    {team.netScore > 0
                      ? `+${team.netScore}`
                      : team.netScore === 0
                        ? 'E'
                        : team.netScore}
                  </div>
                  <div className='w-1/3 md:w-1/4 text-center text-gray-600'>
                    {team.thru}
                  </div>
                  <div className='w-full md:w-1/4 text-center text-gray-600 mt-2 md:mt-0'>
                    {team.mulligansRemaining} Mulligans Left
                  </div>
                </div>
                {/* Add Expanded View section here later */}
              </div>
            ))}
        </div>
      </div>

      {/* Add auto-refresh logic/button later */}
    </div>
  );
};

export default LeaderboardPageContent;
</file>

<file path="src/components/leaderboard/LeaderboardTable.tsx">
import React, { useState } from 'react';

import { TeamRow } from './TeamRow';

// Mock data for the leaderboard - Assuming this structure is correct
interface HoleScore {
  hole: number;
  par: number;
  strokes: number;
  drive: string;
  mulligan: string | null;
}

interface Player {
  name: string;
  drives: number;
  mulligansLeft: number;
}

interface Team {
  id: number;
  name: string;
  grossScore: number;
  netScore: number;
  thru: number | 'F';
  remainingMulligans: number;
  players: Player[];
  holeScores: HoleScore[];
}

const mockTeams: Team[] = [
  {
    id: 1,
    name: 'Marc & Luke',
    grossScore: -2,
    netScore: -4,
    thru: 'F',
    remainingMulligans: 3,
    players: [
      {
        name: 'Marc Johnson',
        drives: 9,
        mulligansLeft: 2,
      },
      {
        name: 'Luke Smith',
        drives: 9,
        mulligansLeft: 1,
      },
    ],
    holeScores: [
      { hole: 1, par: 4, strokes: 4, drive: 'M', mulligan: null },
      { hole: 2, par: 3, strokes: 2, drive: 'M', mulligan: null },
      { hole: 3, par: 5, strokes: 5, drive: 'L', mulligan: null },
      { hole: 4, par: 4, strokes: 3, drive: 'M', mulligan: null },
      { hole: 5, par: 4, strokes: 4, drive: 'L', mulligan: null },
      { hole: 6, par: 3, strokes: 3, drive: 'M', mulligan: null },
      { hole: 7, par: 5, strokes: 6, drive: 'L', mulligan: 'M' },
      { hole: 8, par: 4, strokes: 4, drive: 'M', mulligan: null },
      { hole: 9, par: 4, strokes: 3, drive: 'L', mulligan: null },
      { hole: 10, par: 4, strokes: 4, drive: 'M', mulligan: null },
      { hole: 11, par: 3, strokes: 3, drive: 'L', mulligan: null },
      { hole: 12, par: 5, strokes: 4, drive: 'M', mulligan: null },
      { hole: 13, par: 4, strokes: 5, drive: 'L', mulligan: 'L' },
      { hole: 14, par: 4, strokes: 4, drive: 'M', mulligan: null },
      { hole: 15, par: 3, strokes: 2, drive: 'L', mulligan: null },
      { hole: 16, par: 5, strokes: 5, drive: 'M', mulligan: null },
      { hole: 17, par: 4, strokes: 4, drive: 'L', mulligan: null },
      { hole: 18, par: 4, strokes: 3, drive: 'M', mulligan: null },
    ],
  },
  {
    id: 2,
    name: 'Jane & John',
    grossScore: 0,
    netScore: -2,
    thru: 'F',
    remainingMulligans: 2,
    players: [
      {
        name: 'Jane Doe',
        drives: 8,
        mulligansLeft: 1,
      },
      {
        name: 'John Doe',
        drives: 10,
        mulligansLeft: 1,
      },
    ],
    holeScores: [
      { hole: 1, par: 4, strokes: 4, drive: 'J', mulligan: null },
      { hole: 2, par: 3, strokes: 3, drive: 'Jn', mulligan: null },
      { hole: 3, par: 5, strokes: 4, drive: 'J', mulligan: 'Jn' },
      { hole: 4, par: 4, strokes: 4, drive: 'Jn', mulligan: null },
      { hole: 5, par: 4, strokes: 5, drive: 'J', mulligan: null },
      { hole: 6, par: 3, strokes: 2, drive: 'Jn', mulligan: null },
      { hole: 7, par: 5, strokes: 5, drive: 'J', mulligan: null },
      { hole: 8, par: 4, strokes: 4, drive: 'Jn', mulligan: null },
      { hole: 9, par: 4, strokes: 3, drive: 'J', mulligan: null },
      { hole: 10, par: 4, strokes: 4, drive: 'Jn', mulligan: null },
      { hole: 11, par: 3, strokes: 3, drive: 'J', mulligan: null },
      { hole: 12, par: 5, strokes: 6, drive: 'Jn', mulligan: 'J' },
      { hole: 13, par: 4, strokes: 4, drive: 'J', mulligan: null },
      { hole: 14, par: 4, strokes: 4, drive: 'Jn', mulligan: null },
      { hole: 15, par: 3, strokes: 3, drive: 'J', mulligan: null },
      { hole: 16, par: 5, strokes: 5, drive: 'Jn', mulligan: null },
      { hole: 17, par: 4, strokes: 4, drive: 'J', mulligan: null },
      { hole: 18, par: 4, strokes: 5, drive: 'Jn', mulligan: null },
    ],
  },
  {
    id: 3,
    name: 'Alice & Bob',
    grossScore: 4,
    netScore: 2,
    thru: 16,
    remainingMulligans: 0,
    players: [
      {
        name: 'Alice Cooper',
        drives: 7,
        mulligansLeft: 0,
      },
      {
        name: 'Bob Wilson',
        drives: 9,
        mulligansLeft: 0,
      },
    ],
    holeScores: [
      { hole: 1, par: 4, strokes: 5, drive: 'B', mulligan: 'A' },
      { hole: 2, par: 3, strokes: 4, drive: 'A', mulligan: null },
      { hole: 3, par: 5, strokes: 6, drive: 'B', mulligan: 'B' },
      { hole: 4, par: 4, strokes: 5, drive: 'A', mulligan: null },
      { hole: 5, par: 4, strokes: 4, drive: 'B', mulligan: null },
      { hole: 6, par: 3, strokes: 4, drive: 'A', mulligan: null },
      { hole: 7, par: 5, strokes: 5, drive: 'B', mulligan: null },
      { hole: 8, par: 4, strokes: 4, drive: 'A', mulligan: 'A' },
      { hole: 9, par: 4, strokes: 5, drive: 'B', mulligan: null },
      { hole: 10, par: 4, strokes: 4, drive: 'A', mulligan: null },
      { hole: 11, par: 3, strokes: 4, drive: 'B', mulligan: null },
      { hole: 12, par: 5, strokes: 6, drive: 'A', mulligan: 'B' },
      { hole: 13, par: 4, strokes: 5, drive: 'B', mulligan: null },
      { hole: 14, par: 4, strokes: 5, drive: 'A', mulligan: 'A' },
      { hole: 15, par: 3, strokes: 3, drive: 'B', mulligan: null },
      { hole: 16, par: 5, strokes: 7, drive: 'A', mulligan: null },
    ],
  },
];

export function LeaderboardTable() {
  const [expandedTeamId, setExpandedTeamId] = useState<number | null>(null);

  const toggleExpand = (teamId: number) => {
    setExpandedTeamId(expandedTeamId === teamId ? null : teamId);
  };

  // Ensure mockTeams is sorted by gross score initially
  const sortedTeams = [...mockTeams].sort((a, b) => a.grossScore - b.grossScore);


  return (
    <div className='bg-white rounded-lg shadow-lg overflow-hidden mb-8 border border-gray-200'>
      {/* Header Row */}
      <div className='bg-gray-50 text-gray-600 uppercase py-3 px-4 grid grid-cols-12 text-xs font-semibold tracking-wider border-b border-gray-200'>
        <div className='col-span-5 md:col-span-4 pl-2'>Team</div>
        <div className='col-span-2 text-center'>Gross</div>
        <div className='col-span-2 text-center'>Net</div>
        <div className='col-span-1 text-center'>Thru</div>
        <div className='col-span-2 md:col-span-3 text-center pr-2'>
          Mulligans Left
        </div>
      </div>
      {/* Team Rows */}
      <div className='divide-y divide-gray-200'>
        {sortedTeams.map((team) => ( // Use sortedTeams
          <TeamRow
            key={team.id}
            team={team}
            isExpanded={expandedTeamId === team.id}
            onToggle={() => toggleExpand(team.id)}
          />
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/leaderboard/TeamRow.tsx">
import { ChevronDown, ChevronUp } from 'lucide-react';
import React from 'react';

// Interfaces (assuming these are defined correctly)
interface HoleScore {
  hole: number;
  par: number;
  strokes: number;
  drive: string;
  mulligan: string | null;
}

interface Player {
  name: string;
  drives: number;
  mulligansLeft: number;
}

interface Team {
  id: number;
  name: string;
  grossScore: number;
  netScore: number;
  thru: number | 'F';
  remainingMulligans: number;
  players: Player[];
  holeScores: HoleScore[];
}

interface TeamRowProps {
  team: Team;
  isExpanded: boolean;
  onToggle: () => void;
}

// Helper function to format scores
const formatScore = (score: number) => {
  if (score === 0) return 'E';
  if (score > 0) return `+${score}`;
  return score.toString();
};

// Helper function to color scores
const getScoreColor = (score: number): string => {
  if (score < 0) return 'text-emerald-600';
  if (score > 0) return 'text-red-600';
  return 'text-gray-900';
};

// Helper function to format hole scores relative to par
const formatHoleScore = (strokes: number, par: number): string => {
  const diff = strokes - par;
  if (diff < -1) return 'bg-green-300 text-green-900 font-bold'; // Eagle or better (even darker green)
  if (diff === -1) return 'bg-emerald-50 text-emerald-700 font-bold'; // Birdie (lighter green)
  if (diff === 0) return 'bg-gray-100 text-gray-800'; // Par
  if (diff === 1) return 'bg-red-100 text-red-800'; // Bogey
  if (diff > 1) return 'bg-red-300 text-red-900'; // Double Bogey or worse (darker red)
  return '';
};

export function TeamRow({ team, isExpanded, onToggle }: TeamRowProps) {
  return (
    <div className='bg-white border-b border-gray-200 last:border-b-0'>
      {/* Main row - clickable to toggle expansion */}
      <div
        className='py-4 px-4 grid grid-cols-12 items-center cursor-pointer hover:bg-gray-50 transition-colors duration-150 ease-in-out'
        onClick={onToggle}
      >
        {/* Team Name + Toggle Icon */}
        <div className='col-span-5 md:col-span-4 font-medium flex items-center pl-2'>
          {isExpanded ? (
            <ChevronUp size={18} className='mr-2 text-gray-500' />
          ) : (
            <ChevronDown size={18} className='mr-2 text-gray-500' />
          )}
          <span className='text-gray-800'>{team.name}</span>
        </div>
        {/* Gross Score */}
        <div
          className={`col-span-2 text-center font-semibold ${getScoreColor(team.grossScore)}`}
        >
          {formatScore(team.grossScore)}
        </div>
        {/* Net Score */}
        <div
          className={`col-span-2 text-center font-medium ${getScoreColor(team.netScore)}`}
        >
          {formatScore(team.netScore)}
        </div>
        {/* Thru */}
        <div className='col-span-1 text-center text-gray-600 text-sm'>
          {team.thru}
        </div>
        {/* Mulligans */}
        <div className='col-span-2 md:col-span-3 text-center text-gray-600 pr-2'>
          {team.remainingMulligans}
        </div>
      </div>

      {/* Expanded details - conditionally rendered */}
      {isExpanded && (
        <div className='bg-slate-50/70 px-4 md:px-8 py-6 border-t border-gray-200'>
          {/* Player stats section */}
          <div className='mb-6'>
            <h4 className='font-semibold text-gray-700 mb-3'>Player Stats</h4>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
              {team.players.map((player, idx) => (
                <div
                  key={idx}
                  className='bg-white p-4 rounded-lg border border-gray-200 shadow-sm'
                >
                  <div className='font-medium text-gray-800'>{player.name}</div>
                  <div className='flex justify-between mt-2 text-sm text-gray-600'>
                    <span>Drives: {player.drives}</span>
                    <span>Mulligans Left: {player.mulligansLeft}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Hole by hole scores - Horizontal scrolling table */}
          <div>
            <h4 className='font-semibold text-gray-700 mb-3'>Hole Scores</h4>
            <div className='overflow-x-auto rounded-md border border-gray-200 shadow-sm'>
              <table className='min-w-full border-collapse bg-white'>
                <thead>
                  <tr className='text-xs text-gray-600 bg-gray-100 border-b border-gray-200'>
                    {/* Sticky Header for Hole & Par */}
                    <th className='py-2 px-3 text-left sticky left-0 bg-gray-100 z-10 font-medium border-r border-gray-200'>
                      Hole
                    </th>
                    {Array.from({ length: 18 }, (_, i) => i + 1).map((holeNum) => (
                      <th key={holeNum} className='py-2 px-3 text-center font-medium'>
                        {holeNum}
                      </th>
                    ))}
                  </tr>
                  <tr className='text-xs text-gray-600 bg-gray-100 border-b border-gray-200'>
                    <th className='py-2 px-3 text-left sticky left-0 bg-gray-100 z-10 font-medium border-r border-gray-200'>
                      Par
                    </th>
                    {team.holeScores
                      .concat(
                        // Pad with empty cells if round not finished
                        Array.from({ length: 18 - team.holeScores.length }, () => ({
                          hole: 0, // Dummy value, not used for rendering par
                          par: 0, // Placeholder
                          strokes: 0,
                          drive: '',
                          mulligan: null,
                        }))
                      )
                      .sort((a, b) => a.hole - b.hole) // Ensure sorted by hole
                      .map((hole, idx) => (
                        <th key={idx} className='py-2 px-3 text-center font-medium'>
                          {hole.par || '-'} {/* Show par or dash */}
                        </th>
                      ))}
                  </tr>
                </thead>
                <tbody>
                  {/* Score Row */}
                  <tr className='border-b border-gray-200'>
                    <td className='py-2 px-3 font-medium sticky left-0 bg-white z-10 border-r border-gray-200'>
                      Score
                    </td>
                    {team.holeScores
                      .concat(
                        Array.from({ length: 18 - team.holeScores.length }, () => ({
                          hole: 0,
                          par: 0,
                          strokes: 0,
                          drive: '',
                          mulligan: null,
                        }))
                      )
                      .sort((a, b) => a.hole - b.hole)
                      .map((hole, idx) => (
                        <td
                          key={idx}
                          className={`py-2 px-3 text-center font-semibold text-sm ${hole.hole ? formatHoleScore(hole.strokes, hole.par) : 'bg-gray-50'}`}
                        >
                          {hole.hole ? hole.strokes : '-'} {/* Show strokes or dash */}
                        </td>
                      ))}
                  </tr>
                  {/* Drive Row */}
                  <tr className='border-b border-gray-200'>
                    <td className='py-2 px-3 font-medium sticky left-0 bg-white z-10 border-r border-gray-200'>
                      Drive
                    </td>
                    {team.holeScores
                      .concat(
                        Array.from({ length: 18 - team.holeScores.length }, () => ({
                          hole: 0,
                          par: 0,
                          strokes: 0,
                          drive: '',
                          mulligan: null,
                        }))
                      )
                      .sort((a, b) => a.hole - b.hole)
                      .map((hole, idx) => (
                        <td
                          key={idx}
                          className={`py-2 px-3 text-center text-sm ${!hole.hole ? 'text-gray-400' : 'text-gray-700'}`}
                        >
                          {hole.drive || '-'}
                        </td>
                      ))}
                  </tr>
                  {/* Mulligan Row */}
                  <tr>
                    <td className='py-2 px-3 font-medium sticky left-0 bg-white z-10 border-r border-gray-200'>
                      Mulligan
                    </td>
                    {team.holeScores
                      .concat(
                        Array.from({ length: 18 - team.holeScores.length }, () => ({
                          hole: 0,
                          par: 0,
                          strokes: 0,
                          drive: '',
                          mulligan: null,
                        }))
                      )
                      .sort((a, b) => a.hole - b.hole)
                      .map((hole, idx) => (
                        <td
                          key={idx}
                          className={`py-2 px-3 text-center text-sm ${!hole.hole ? 'text-gray-400' : hole.mulligan ? 'text-orange-600 font-medium' : 'text-gray-500'}`}
                        >
                          {hole.mulligan || '-'}
                        </td>
                      ))}
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/links/ArrowLink.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

import UnderlineLink from '@/components/links/UnderlineLink';
import { UnstyledLinkProps } from '@/components/links/UnstyledLink';

type ArrowLinkProps<C extends React.ElementType> = {
  as?: C;
  direction?: 'left' | 'right';
} & UnstyledLinkProps &
  React.ComponentProps<C>;

export default function ArrowLink<C extends React.ElementType>({
  children,
  className,
  direction = 'right',
  as,
  ...rest
}: ArrowLinkProps<C>) {
  const Component = as || UnderlineLink;

  return (
    <Component
      {...rest}
      className={cn(
        'group gap-[0.25em]',
        direction === 'left' && 'flex-row-reverse',
        className
      )}
    >
      <span>{children}</span>
      <svg
        viewBox='0 0 16 16'
        height='1em'
        width='1em'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
        className={cn(
          'relative',
          'transition-transform duration-200',
          direction === 'right' ? 'motion-safe:-translate-x-1' : 'rotate-180',
          'group-hover:translate-x-0'
        )}
      >
        <path
          fill='currentColor'
          d='M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z'
        />
        <path
          stroke='currentColor'
          d='M1.75 8H11'
          strokeWidth='1.5'
          strokeLinecap='round'
          className={cn(
            'origin-left transition-all duration-200',
            'opacity-0 motion-safe:-translate-x-1',
            'group-hover:translate-x-0 group-hover:opacity-100'
          )}
        />
      </svg>
    </Component>
  );
}
</file>

<file path="src/components/links/UnstyledLink.tsx">
import Link, { LinkProps } from 'next/link';
import * as React from 'react';

import { cn } from '@/lib/utils';

export type UnstyledLinkProps = {
  href: string;
  children: React.ReactNode;
  openNewTab?: boolean;
  className?: string;
  nextLinkProps?: Omit<LinkProps, 'href'>;
} & React.ComponentPropsWithRef<'a'>;

const UnstyledLink = React.forwardRef<HTMLAnchorElement, UnstyledLinkProps>(
  ({ children, href, openNewTab, className, nextLinkProps, ...rest }, ref) => {
    const isNewTab =
      openNewTab !== undefined
        ? openNewTab
        : href && !href.startsWith('/') && !href.startsWith('#');

    if (!isNewTab) {
      return (
        <Link
          href={href}
          ref={ref}
          className={className}
          {...rest}
          {...nextLinkProps}
        >
          {children}
        </Link>
      );
    }

    return (
      <a
        ref={ref}
        target='_blank'
        rel='noopener noreferrer'
        href={href}
        {...rest}
        className={cn('cursor-newtab', className)}
      >
        {children}
      </a>
    );
  }
);

export default UnstyledLink;
</file>

<file path="src/components/scoring/HoleInput.tsx">
import React from 'react';
interface Player {
  id: number;
  name: string;
  mulligansLeft: number;
}
interface HoleInputProps {
  holeNumber: number;
  par: number;
  players: Player[];
  strokes: number | null;
  selectedDrive: number | null;
  selectedMulligan: number | null;
  availableMulligans: Record<number, number>;
  onChange: (holeNumber: number, field: string, value: number | null) => void;
}
export function HoleInput({
  holeNumber,
  par,
  players,
  strokes,
  selectedDrive,
  selectedMulligan,
  availableMulligans,
  onChange,
}: HoleInputProps) {
  return (
    <div className='grid grid-cols-12 gap-4 items-center py-2 border-b border-gray-100'>
      <div className='col-span-1 font-medium'>{holeNumber}</div>
      <div className='col-span-1 text-gray-600'>Par {par}</div>
      {/* Strokes input */}
      <div className='col-span-2'>
        <input
          type='number'
          min='1'
          max='12'
          value={strokes === null ? '' : strokes}
          onChange={(e) =>
            onChange(
              holeNumber,
              'strokes',
              e.target.value ? Number(e.target.value) : null,
            )
          }
          className='w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#0B3D2E]'
          placeholder='Score'
        />
      </div>
      {/* Drive selection */}
      <div className='col-span-4'>
        <label className='block text-xs text-gray-500 mb-1'>Drive</label>
        <div className='flex'>
          {players.map((player) => (
            <button
              key={player.id}
              type='button'
              onClick={() => onChange(holeNumber, 'drive', player.id)}
              className={`flex-1 px-3 py-2 text-sm border ${selectedDrive === player.id ? 'bg-[#0B3D2E] text-white border-[#0B3D2E]' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'} ${player.id === players[0].id ? 'rounded-l' : 'rounded-r'}`}
            >
              {player.name}
            </button>
          ))}
        </div>
      </div>
      {/* Mulligan selection */}
      <div className='col-span-4'>
        <label className='block text-xs text-gray-500 mb-1'>Mulligan</label>
        <div className='flex'>
          <button
            type='button'
            onClick={() => onChange(holeNumber, 'mulligan', null)}
            className={`flex-1 px-3 py-2 text-sm border ${selectedMulligan === null ? 'bg-[#0B3D2E] text-white border-[#0B3D2E]' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'} rounded-l`}
          >
            None
          </button>
          {players.map((player) => (
            <button
              key={player.id}
              type='button'
              disabled={
                availableMulligans[player.id] <= 0 &&
                selectedMulligan !== player.id
              }
              onClick={() => onChange(holeNumber, 'mulligan', player.id)}
              className={`flex-1 px-3 py-2 text-sm border ${selectedMulligan === player.id ? 'bg-[#0B3D2E] text-white border-[#0B3D2E]' : availableMulligans[player.id] <= 0 ? 'bg-gray-100 text-gray-400 border-gray-300 cursor-not-allowed' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'} ${player.id === players[players.length - 1].id ? 'rounded-r' : ''}`}
            >
              {player.name} ({availableMulligans[player.id]})
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/scoring/ScoreInputForm.tsx">
import React, { useEffect, useState } from 'react';

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

interface Player {
  id: number;
  name: string;
  mulligansLeft: number;
}
interface Hole {
  number: number;
  par: number;
}
interface CourseData {
  holes: Hole[];
}
interface TeamData {
  id: number;
  name: string;
  players: Player[];
}
interface HoleScore {
  hole: number;
  strokes: number | null;
  drive: number | null; // player id
  mulligan: number | null; // player id
}

// Define the type for the submitted score data
export interface SubmittedScoreData {
  teamId: number;
  scores: HoleScore[];
  driveCounts: Record<number, number>;
  mulliganCounts: Record<number, number>;
}

interface ScoreInputFormProps {
  courseData: CourseData;
  teamData: TeamData;
  onSubmit: (scoreData: SubmittedScoreData) => void; // Use the defined type
}

// Helper function to format hole scores relative to par (updated colors)
const formatHoleScore = (strokes: number | null, par: number): string => {
  if (strokes === null) return ''; // No score, no special style
  const diff = strokes - par;
  if (diff < -1) return 'bg-green-300 text-green-900 font-bold'; // Eagle or better (even darker green)
  if (diff === -1) return 'bg-emerald-50 text-emerald-700 font-bold'; // Birdie (lighter green)
  if (diff === 0) return 'bg-gray-100 text-gray-800'; // Par
  if (diff === 1) return 'bg-red-100 text-red-800'; // Bogey
  if (diff > 1) return 'bg-red-300 text-red-900'; // Double Bogey or worse (darker red)
  return '';
};

export function ScoreInputForm({
  courseData,
  teamData,
  onSubmit,
}: ScoreInputFormProps) {
  // Initialize scores for all holes
  const initialScores = courseData.holes.map((hole) => ({
    hole: hole.number,
    strokes: null,
    drive: null,
    mulligan: null,
  }));
  const [scores, setScores] = useState<HoleScore[]>(initialScores);
  const [driveCounts, setDriveCounts] = useState<Record<number, number>>({});
  const [mulliganCounts, setMulliganCounts] = useState<Record<number, number>>(
    {},
  );
  // Initialize drive and mulligan counts
  useEffect(() => {
    const drives: Record<number, number> = {};
    const mulligans: Record<number, number> = {};
    teamData.players.forEach((player) => {
      drives[player.id] = 0;
      mulligans[player.id] = player.mulligansLeft;
    });
    setDriveCounts(drives);
    setMulliganCounts(mulligans);
  }, [teamData]);
  // Auto-submit effect when scores change
  useEffect(() => {
    // Check if all holes have strokes and drive selected
    const incompleteHoles = scores.filter(
      (score) => score.strokes === null || score.drive === null,
    );
    // Don't auto-submit if there are incomplete holes
    if (incompleteHoles.length > 0) {
      return;
    }
    // Check minimum drive counts
    const minDriveCount = 5;
    const insufficientDrives = Object.entries(driveCounts).filter(
      ([_, count]) => count < minDriveCount,
    );
    // Don't auto-submit if drive requirements aren't met
    if (insufficientDrives.length > 0) {
      return;
    }
    // Auto-submit if all validations pass
    onSubmit({
      teamId: teamData.id,
      scores,
      driveCounts,
      mulliganCounts,
    });
  }, [scores, driveCounts, mulliganCounts, onSubmit, teamData.id]); // Add missing dependencies
  // Update a hole's score
  const updateHoleScore = (
    holeNumber: number,
    field: string,
    value: number | null,
  ) => {
    setScores((prevScores) => {
      return prevScores.map((score) => {
        if (score.hole === holeNumber) {
          // If changing drive selection, update drive counts
          if (field === 'drive') {
            // Decrement previous drive count if it exists
            if (score.drive !== null) {
              setDriveCounts((prev) => ({
                ...prev,
                [score.drive as number]: prev[score.drive as number] - 1,
              }));
            }
            // Increment new drive count if it exists
            if (value !== null) {
              setDriveCounts((prev) => ({
                ...prev,
                [value]: prev[value] + 1,
              }));
            }
          }
          // If changing mulligan selection, update mulligan counts
          if (field === 'mulligan') {
            // If removing a mulligan, return it to the player
            if (score.mulligan !== null && value === null) {
              setMulliganCounts((prev) => ({
                ...prev,
                [score.mulligan as number]: prev[score.mulligan as number] + 1,
              }));
            }
            // If adding a new mulligan, deduct it from the player
            if (value !== null && score.mulligan !== value) {
              // Return the previous mulligan if there was one
              if (score.mulligan !== null) {
                setMulliganCounts((prev) => ({
                  ...prev,
                  [score.mulligan as number]:
                    prev[score.mulligan as number] + 1,
                }));
              }
              // Deduct the new mulligan
              setMulliganCounts((prev) => ({
                ...prev,
                [value]: prev[value] - 1,
              }));
            }
          }
          return {
            ...score,
            [field]: value,
          };
        }
        return score;
      });
    });
  };
  // Group holes into front 9 and back 9
  const frontNine = courseData.holes.slice(0, 9);
  const backNine = courseData.holes.slice(9, 18);

  // Function to render table rows for a set of holes
  const renderTableRows = (holes: Hole[]) => {
    return (
      <>
        {/* Par Row */}
        <tr className='border-b border-gray-200'>
          <td className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10 text-sm'>
            Par
          </td>
          {holes.map((hole) => (
            <td key={hole.number} className='px-1 py-2 text-center'>
              {hole.par}
            </td>
          ))}
        </tr>
        {/* Score Row */}
        <tr className='border-b border-gray-200'>
          <td className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10 text-sm'>
            Score
          </td>
          {holes.map((hole) => {
            const score = scores.find((s) => s.hole === hole.number);
            const scoreClass = formatHoleScore(score?.strokes ?? null, hole.par);
            return (
              <td key={hole.number} className='px-1 py-2 text-center'>
                <input
                  type='number'
                  min='1'
                  max='12'
                  value={
                    score?.strokes === null || score?.strokes === undefined ? '' : score.strokes
                  }
                  onChange={(e) =>
                    updateHoleScore(
                      hole.number,
                      'strokes',
                      e.target.value ? Number(e.target.value) : null,
                    )
                  }
                  className={`w-full border border-gray-300 rounded px-1.5 py-1 text-center focus:outline-none focus:ring-2 focus:ring-[#0B3D2E] ${scoreClass}`}
                />
              </td>
            );
          })}
        </tr>
        {/* Drive Row */}
        <tr className='border-b border-gray-200'>
          <td className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10 text-sm'>
            Drive
          </td>
          {holes.map((hole) => {
            const score = scores.find((s) => s.hole === hole.number);
            return (
              <td key={hole.number} className='px-1 py-2 text-center'>
                <Select
                  value={score?.drive?.toString() ?? ''}
                  onValueChange={(value) =>
                    updateHoleScore(
                      hole.number,
                      'drive',
                      value === 'null' || !value ? null : Number(value),
                    )
                  }
                >
                  <SelectTrigger className='w-12 h-8 px-1 py-1 text-sm mx-auto'>
                    <SelectValue placeholder='-' />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='null' className='text-gray-500'>
                      -
                    </SelectItem>
                    {teamData.players.map((player) => (
                      <SelectItem key={player.id} value={player.id.toString()}>
                        {player.name.substring(0, 2)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </td>
            );
          })}
        </tr>
        {/* Mulligan Row */}
        <tr>
          <td className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10 text-sm'>
            Mulligan
          </td>
          {holes.map((hole) => {
            const score = scores.find((s) => s.hole === hole.number);
            return (
              <td key={hole.number} className='px-1 py-2 text-center'>
                <Select
                  value={score?.mulligan?.toString() ?? ''}
                  onValueChange={(value) =>
                    updateHoleScore(
                      hole.number,
                      'mulligan',
                      value === 'null' || !value ? null : Number(value),
                    )
                  }
                >
                  <SelectTrigger className='w-12 h-8 px-1 py-1 text-sm mx-auto'>
                    <SelectValue placeholder='-' />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='null' className='text-gray-500'>
                      -
                    </SelectItem>
                    {teamData.players.map((player) => {
                      const remaining = score?.mulligan === player.id ? mulliganCounts[player.id] + 1 : mulliganCounts[player.id];
                      const isDisabled = remaining <= 0 && score?.mulligan !== player.id;
                      return (
                        <SelectItem
                          key={player.id}
                          value={player.id.toString()}
                          disabled={isDisabled}
                        >
                          {player.name.substring(0, 2)}
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              </td>
            );
          })}
        </tr>
      </>
    );
  };

  return (
    <div className='max-w-full mx-auto'>
      <div className='bg-white rounded-lg shadow-md overflow-hidden mb-8'>
        <div className='bg-[#0B3D2E] text-white px-6 py-4 flex justify-between items-center'>
          <h2 className='text-xl font-bold'>{teamData.name}</h2>
          <div className='flex space-x-6'>
            {teamData.players.map((player) => (
              <div key={player.id} className='text-sm'>
                <span className='font-medium'>{player.name}:</span> {' '}
                <span>{mulliganCounts[player.id] ?? 0} mulligans left</span>
              </div>
            ))}
          </div>
        </div>
        <div className='p-6'>
          {/* Drive summary */}
          <div className='mb-6 bg-gray-50 p-4 rounded-lg'>
            <h3 className='font-medium mb-2'>Drive Count</h3>
            <div className='flex justify-between'>
              {teamData.players.map((player) => {
                const count = driveCounts[player.id] ?? 0;
                const minDriveCount = 5;
                const isLow = count < minDriveCount;
                const isFinished = scores.every(s => s.drive !== null);
                const remainingHoles = scores.filter(s => s.drive === null).length;
                const maxPossible = count + remainingHoles;
                const isImpossible = isFinished && isLow;

                return (
                  <div key={player.id}>
                    <span className='font-medium'>{player.name}:</span> {' '}
                    <span
                      className={`font-semibold ${isImpossible ? 'text-red-600' : isLow ? 'text-orange-600' : 'text-green-600'
                        }`}
                    >
                      {count} / {minDriveCount} needed
                    </span>
                    {isImpossible && <span className="text-xs text-red-500 ml-1">(Impossible)</span>}
                  </div>
                );
              })}
            </div>
            <div className='text-sm text-gray-500 mt-2'>
              Each player must use their drive at least 5 times. Counts update as you select drives.
            </div>
          </div>
          {/* Front Nine */}
          <div className='mb-10'>
            <h3 className='font-bold mb-3 text-lg'>Front Nine</h3>
            <div className='overflow-x-auto'>
              <table className='min-w-full border-collapse'>
                <thead>
                  <tr className='border-b border-gray-200'>
                    <th className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10'>
                      Hole
                    </th>
                    {frontNine.map((hole) => (
                      <th
                        key={hole.number}
                        className='px-1 py-2 text-center font-medium text-gray-700 min-w-[45px]'
                      >
                        {hole.number}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {renderTableRows(frontNine)}
                </tbody>
              </table>
            </div>
          </div>
          {/* Back Nine */}
          <div className='mb-6'>
            <h3 className='font-bold mb-3 text-lg'>Back Nine</h3>
            <div className='overflow-x-auto'>
              <table className='min-w-full border-collapse'>
                <thead>
                  <tr className='border-b border-gray-200'>
                    <th className='px-1 py-2 bg-gray-50 text-left font-medium text-gray-700 sticky left-0 z-10'>
                      Hole
                    </th>
                    {backNine.map((hole) => (
                      <th
                        key={hole.number}
                        className='px-1 py-2 text-center font-medium text-gray-700 min-w-[45px]'
                      >
                        {hole.number}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {renderTableRows(backNine)}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/Skeleton.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

type SkeletonProps = React.ComponentPropsWithoutRef<'div'>;

export default function Skeleton({ className, ...rest }: SkeletonProps) {
  return (
    <div
      className={cn('animate-shimmer bg-[#f6f7f8]', className)}
      style={{
        backgroundImage:
          'linear-gradient(to right, #f6f7f8 0%, #edeef1 20%, #f6f7f8 40%, #f6f7f8 100%)',
        backgroundSize: '700px 100%',
        backgroundRepeat: 'no-repeat',
      }}
      {...rest}
    />
  );
}
</file>

<file path="src/constant/config.ts">
export const siteConfig = {
  title: 'Next.js + Tailwind CSS + TypeScript Starter',
  description:
    'A starter for Next.js, Tailwind CSS, and TypeScript with Absolute Import, Seo, Link component, pre-configured with Husky',
  /** Without additional '/' on the end, e.g. https://theodorusclarence.com */
  url: 'https://tsnext-tw.thcl.dev',
};
</file>

<file path="src/lib/__tests__/og.test.ts">
import { openGraph } from '@/lib/og';

describe('Open Graph function should work correctly', () => {
  it('should not return templateTitle when not specified', () => {
    const result = openGraph({
      description: 'Test description',
      siteName: 'Test site name',
    });
    expect(result).not.toContain('&templateTitle=');
  });

  it('should return templateTitle when specified', () => {
    const result = openGraph({
      templateTitle: 'Test Template Title',
      description: 'Test description',
      siteName: 'Test site name',
    });
    expect(result).toContain('&templateTitle=Test%20Template%20Title');
  });
});
</file>

<file path="src/lib/env.ts">
/* eslint-disable @typescript-eslint/no-namespace */
/**
 * Configuration for type-safe environment variables.
 * Imported through src/app/page.tsx
 * @see https://x.com/mattpocockuk/status/1760991147793449396
 */
import { z } from 'zod';

const envVariables = z.object({
  NEXT_PUBLIC_SHOW_LOGGER: z.enum(['true', 'false']).optional(),
});

envVariables.parse(process.env);

declare global {
  namespace NodeJS {
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface ProcessEnv extends z.infer<typeof envVariables> {}
  }
}
</file>

<file path="src/lib/helper.ts">
export function getFromLocalStorage(key: string): string | null {
  if (typeof window !== 'undefined') {
    return window.localStorage.getItem(key);
  }
  return null;
}

export function getFromSessionStorage(key: string): string | null {
  if (typeof sessionStorage !== 'undefined') {
    return sessionStorage.getItem(key);
  }
  return null;
}
</file>

<file path="src/lib/og.ts">
type OpenGraphType = {
  siteName: string;
  description: string;
  templateTitle?: string;
  logo?: string;
};
// !STARTERCONF This OG is generated from https://github.com/theodorusclarence/og
// Please clone them and self-host if your site is going to be visited by many people.
// Then change the url and the default logo.
export function openGraph({
  siteName,
  templateTitle,
  description,
  // !STARTERCONF Or, you can use my server with your own logo.
  logo = 'https://og.<your-domain>/images/logo.jpg',
}: OpenGraphType): string {
  const ogLogo = encodeURIComponent(logo);
  const ogSiteName = encodeURIComponent(siteName.trim());
  const ogTemplateTitle = templateTitle
    ? encodeURIComponent(templateTitle.trim())
    : undefined;
  const ogDesc = encodeURIComponent(description.trim());

  return `https://og.<your-domain>/api/general?siteName=${ogSiteName}&description=${ogDesc}&logo=${ogLogo}${
    ogTemplateTitle ? `&templateTitle=${ogTemplateTitle}` : ''
  }`;
}
</file>

<file path="src/pages/AdminTeamsPage.tsx">
import React from 'react';

import { AdminTeamsManager } from '../components/admin/AdminTeamsManager';
import Layout from '../components/layout/Layout';

export function AdminTeamsPage() {
  return (
    <Layout>
      <div className='w-full bg-[#F3F4F6] py-8 md:py-12'>
        <div className='container mx-auto px-4'>
          <h1 className='text-3xl md:text-4xl font-bold mb-2 text-center text-[#0B3D2E]'>
            Tournament Admin
          </h1>
          <p className='text-center mb-8 text-gray-600'>
            Manage teams and players for the tournament
          </p>
          <AdminTeamsManager />
        </div>
      </div>
    </Layout>
  );
}

export default AdminTeamsPage;
</file>

<file path="src/pages/LeaderboardPage.tsx">
import React from 'react';

import Layout from '../components/layout/Layout';
import { LeaderboardTable } from '../components/leaderboard/LeaderboardTable';

export function LeaderboardPage() {
  return (
    <Layout>
      <div className='w-full bg-[#F3F4F6] py-8 md:py-12'>
        <div className='container mx-auto px-4'>
          <h1 className='text-3xl md:text-4xl font-bold mb-8 text-center text-[#0B3D2E]'>
            Tournament Leaderboard
          </h1>
          <LeaderboardTable />
        </div>
      </div>
    </Layout>
  );
}

export default LeaderboardPage;
</file>

<file path="src/pages/ScoreInputPage.tsx">
import React, { useState } from 'react';

import Layout from '../components/layout/Layout';
import {
  ScoreInputForm,
  SubmittedScoreData,
} from '../components/scoring/ScoreInputForm';

// console.log('Imported ScoreInputForm:', ScoreInputForm); // REMOVE

export function ScoreInputPage() {
  // console.log('Rendering ScoreInputPage'); // REMOVE

  // State to control display of success message after submission
  const [isSubmitted, setIsSubmitted] = useState(false);

  // Mock course data - in a real app this would come from an API
  const courseData = {
    holes: Array.from(
      {
        length: 18,
      },
      (_, i) => ({
        number: i + 1,
        par: i % 3 === 0 ? 5 : i % 3 === 1 ? 4 : 3, // Alternating par 5, 4, 3
      }),
    ),
  };
  // Mock team data - in a real app this would come from an API or user selection
  const teamData = {
    id: 1,
    name: 'Your Team',
    players: [
      {
        id: 1,
        name: 'Player 1',
        mulligansLeft: 3,
      },
      {
        id: 2,
        name: 'Player 2',
        mulligansLeft: 3,
      },
    ],
  };
  const handleSubmitScores = (_scoreData: SubmittedScoreData) => {
    // console.log('Simulating score submission:', _scoreData); // Keep commented out or remove
    // In a real app, this would send data to an API
    setIsSubmitted(true);
    // Redirect to leaderboard after a short delay
    setTimeout(() => {
      window.location.href = '/LeaderboardPage';
    }, 2000);
  };
  return (
    <Layout>
      <div className='w-full bg-[#F3F4F6] py-8 md:py-12'>
        <div className='container mx-auto px-4'>
          <h1 className='text-3xl md:text-4xl font-bold mb-4 text-center text-[#0B3D2E]'>
            Score Input
          </h1>
          <p className='text-center mb-8 max-w-2xl mx-auto'>
            Enter your team's scores for each hole. Remember to select which
            player's drive was used and mark any mulligans.
          </p>
          {isSubmitted ? (
            <div className='bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative max-w-3xl mx-auto'>
              <strong className='font-bold'>Success!</strong>
              <span className='block sm:inline'>
                {' '}
                Your scores have been submitted.
              </span>
              <p className='mt-2'>Redirecting to leaderboard...</p>
            </div>
          ) : (
            <ScoreInputForm
              courseData={courseData}
              teamData={teamData}
              onSubmit={handleSubmitScores}
            />
          )}
        </div>
      </div>
    </Layout>
  );
}

export default ScoreInputPage;
</file>

<file path="src/styles/colors.css">
/* //!STARTERCONF Remove this file after copying your desired color, this is a large file you should remove it. */

.slate {
  --tw-color-primary-50: 248 250 252;
  --tw-color-primary-100: 241 245 249;
  --tw-color-primary-200: 226 232 240;
  --tw-color-primary-300: 203 213 225;
  --tw-color-primary-400: 148 163 184;
  --tw-color-primary-500: 100 116 139;
  --tw-color-primary-600: 71 85 105;
  --tw-color-primary-700: 51 65 85;
  --tw-color-primary-800: 30 41 59;
  --tw-color-primary-900: 15 23 42;
  --tw-color-primary-950: 2 6 23;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f8fafc */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f1f5f9 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e2e8f0 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #cbd5e1 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #94a3b8 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #64748b */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #475569 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #334155 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #1e293b */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #0f172a */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #020617 */
}

.gray {
  --tw-color-primary-50: 249 250 251;
  --tw-color-primary-100: 243 244 246;
  --tw-color-primary-200: 229 231 235;
  --tw-color-primary-300: 209 213 219;
  --tw-color-primary-400: 156 163 175;
  --tw-color-primary-500: 107 114 128;
  --tw-color-primary-600: 75 85 99;
  --tw-color-primary-700: 55 65 81;
  --tw-color-primary-800: 31 41 55;
  --tw-color-primary-900: 17 24 39;
  --tw-color-primary-950: 3 7 18;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f9fafb */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f3f4f6 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e5e7eb */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #d1d5db */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #9ca3af */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #6b7280 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #4b5563 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #374151 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #1f2937 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #111827 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #030712 */
}

.zinc {
  --tw-color-primary-50: 250 250 250;
  --tw-color-primary-100: 244 244 245;
  --tw-color-primary-200: 228 228 231;
  --tw-color-primary-300: 212 212 216;
  --tw-color-primary-400: 161 161 170;
  --tw-color-primary-500: 113 113 122;
  --tw-color-primary-600: 82 82 91;
  --tw-color-primary-700: 63 63 70;
  --tw-color-primary-800: 39 39 42;
  --tw-color-primary-900: 24 24 27;
  --tw-color-primary-950: 9 9 11;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fafafa */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f4f4f5 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e4e4e7 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #d4d4d8 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #a1a1aa */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #71717a */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #52525b */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #3f3f46 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #27272a */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #18181b */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #09090b */
}

.neutral {
  --tw-color-primary-50: 250 250 250;
  --tw-color-primary-100: 245 245 245;
  --tw-color-primary-200: 229 229 229;
  --tw-color-primary-300: 212 212 212;
  --tw-color-primary-400: 163 163 163;
  --tw-color-primary-500: 115 115 115;
  --tw-color-primary-600: 82 82 82;
  --tw-color-primary-700: 64 64 64;
  --tw-color-primary-800: 38 38 38;
  --tw-color-primary-900: 23 23 23;
  --tw-color-primary-950: 10 10 10;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fafafa */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f5f5f5 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e5e5e5 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #d4d4d4 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #a3a3a3 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #737373 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #525252 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #404040 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #262626 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #171717 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #0a0a0a */
}

.stone {
  --tw-color-primary-50: 250 250 249;
  --tw-color-primary-100: 245 245 244;
  --tw-color-primary-200: 231 229 228;
  --tw-color-primary-300: 214 211 209;
  --tw-color-primary-400: 168 162 158;
  --tw-color-primary-500: 120 113 108;
  --tw-color-primary-600: 87 83 78;
  --tw-color-primary-700: 68 64 60;
  --tw-color-primary-800: 41 37 36;
  --tw-color-primary-900: 28 25 23;
  --tw-color-primary-950: 12 10 9;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fafaf9 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f5f5f4 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e7e5e4 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #d6d3d1 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #a8a29e */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #78716c */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #57534e */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #44403c */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #292524 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #1c1917 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #0c0a09 */
}

.red {
  --tw-color-primary-50: 254 242 242;
  --tw-color-primary-100: 254 226 226;
  --tw-color-primary-200: 254 202 202;
  --tw-color-primary-300: 252 165 165;
  --tw-color-primary-400: 248 113 113;
  --tw-color-primary-500: 239 68 68;
  --tw-color-primary-600: 220 38 38;
  --tw-color-primary-700: 185 28 28;
  --tw-color-primary-800: 153 27 27;
  --tw-color-primary-900: 127 29 29;
  --tw-color-primary-950: 69 10 10;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fef2f2 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #fee2e2 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fecaca */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #fca5a5 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #f87171 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #ef4444 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #dc2626 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #b91c1c */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #991b1b */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #7f1d1d */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #450a0a */
}

.orange {
  --tw-color-primary-50: 255 247 237;
  --tw-color-primary-100: 255 237 213;
  --tw-color-primary-200: 254 215 170;
  --tw-color-primary-300: 253 186 116;
  --tw-color-primary-400: 251 146 60;
  --tw-color-primary-500: 249 115 22;
  --tw-color-primary-600: 234 88 12;
  --tw-color-primary-700: 194 65 12;
  --tw-color-primary-800: 154 52 18;
  --tw-color-primary-900: 124 45 18;
  --tw-color-primary-950: 67 20 7;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fff7ed */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #ffedd5 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fed7aa */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #fdba74 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #fb923c */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #f97316 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #ea580c */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #c2410c */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #9a3412 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #7c2d12 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #431407 */
}

.amber {
  --tw-color-primary-50: 255 251 235;
  --tw-color-primary-100: 254 243 199;
  --tw-color-primary-200: 253 230 138;
  --tw-color-primary-300: 252 211 77;
  --tw-color-primary-400: 251 191 36;
  --tw-color-primary-500: 245 158 11;
  --tw-color-primary-600: 217 119 6;
  --tw-color-primary-700: 180 83 9;
  --tw-color-primary-800: 146 64 14;
  --tw-color-primary-900: 120 53 15;
  --tw-color-primary-950: 69 26 3;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fffbeb */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #fef3c7 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fde68a */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #fcd34d */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #fbbf24 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #f59e0b */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #d97706 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #b45309 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #92400e */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #78350f */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #451a03 */
}

.yellow {
  --tw-color-primary-50: 254 252 232;
  --tw-color-primary-100: 254 249 195;
  --tw-color-primary-200: 254 240 138;
  --tw-color-primary-300: 253 224 71;
  --tw-color-primary-400: 250 204 21;
  --tw-color-primary-500: 234 179 8;
  --tw-color-primary-600: 202 138 4;
  --tw-color-primary-700: 161 98 7;
  --tw-color-primary-800: 133 77 14;
  --tw-color-primary-900: 113 63 18;
  --tw-color-primary-950: 66 32 6;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fefce8 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #fef9c3 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fef08a */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #fde047 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #facc15 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #eab308 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #ca8a04 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #a16207 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #854d0e */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #713f12 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #422006 */
}
.lime {
  --tw-color-primary-50: 247 254 231;
  --tw-color-primary-100: 236 252 203;
  --tw-color-primary-200: 217 249 157;
  --tw-color-primary-300: 190 242 100;
  --tw-color-primary-400: 163 230 53;
  --tw-color-primary-500: 132 204 22;
  --tw-color-primary-600: 101 163 13;
  --tw-color-primary-700: 77 124 15;
  --tw-color-primary-800: 63 98 18;
  --tw-color-primary-900: 54 83 20;
  --tw-color-primary-950: 26 46 5;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f7fee7 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #ecfccb */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #d9f99d */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #bef264 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #a3e635 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #84cc16 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #65a30d */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #4d7c0f */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #3f6212 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #365314 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #1a2e05 */
}

.green {
  --tw-color-primary-50: 240 253 244;
  --tw-color-primary-100: 220 252 231;
  --tw-color-primary-200: 187 247 208;
  --tw-color-primary-300: 134 239 172;
  --tw-color-primary-400: 74 222 128;
  --tw-color-primary-500: 34 197 94;
  --tw-color-primary-600: 22 163 74;
  --tw-color-primary-700: 21 128 61;
  --tw-color-primary-800: 22 101 52;
  --tw-color-primary-900: 20 83 45;
  --tw-color-primary-950: 5 46 22;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f0fdf4 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #dcfce7 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #bbf7d0 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #86efac */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #4ade80 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #22c55e */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #16a34a */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #15803d */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #166534 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #14532d */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #052e16 */
}

.emerald {
  --tw-color-primary-50: 236 253 245;
  --tw-color-primary-100: 209 250 229;
  --tw-color-primary-200: 167 243 208;
  --tw-color-primary-300: 110 231 183;
  --tw-color-primary-400: 52 211 153;
  --tw-color-primary-500: 16 185 129;
  --tw-color-primary-600: 5 150 105;
  --tw-color-primary-700: 4 120 87;
  --tw-color-primary-800: 6 95 70;
  --tw-color-primary-900: 6 78 59;
  --tw-color-primary-950: 2 44 34;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #ecfdf5 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #d1fae5 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #a7f3d0 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #6ee7b7 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #34d399 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #10b981 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #059669 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #047857 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #065f46 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #064e3b */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #022c22 */
}

.teal {
  --tw-color-primary-50: 240 253 250;
  --tw-color-primary-100: 204 251 241;
  --tw-color-primary-200: 153 246 228;
  --tw-color-primary-300: 94 234 212;
  --tw-color-primary-400: 45 212 191;
  --tw-color-primary-500: 20 184 166;
  --tw-color-primary-600: 13 148 136;
  --tw-color-primary-700: 15 118 110;
  --tw-color-primary-800: 17 94 89;
  --tw-color-primary-900: 19 78 74;
  --tw-color-primary-950: 4 47 46;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f0fdfa */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #ccfbf1 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #99f6e4 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #5eead4 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #2dd4bf */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #14b8a6 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #0d9488 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #0f766e */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #115e59 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #134e4a */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #042f2e */
}

.cyan {
  --tw-color-primary-50: 236 254 255;
  --tw-color-primary-100: 207 250 254;
  --tw-color-primary-200: 165 243 252;
  --tw-color-primary-300: 103 232 249;
  --tw-color-primary-400: 34 211 238;
  --tw-color-primary-500: 6 182 212;
  --tw-color-primary-600: 8 145 178;
  --tw-color-primary-700: 14 116 144;
  --tw-color-primary-800: 21 94 117;
  --tw-color-primary-900: 22 78 99;
  --tw-color-primary-950: 8 51 68;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #ecfeff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #cffafe */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #a5f3fc */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #67e8f9 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #22d3ee */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #06b6d4 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #0891b2 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #0e7490 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #155e75 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #164e63 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #083344 */
}

.sky {
  --tw-color-primary-50: 240 249 255;
  --tw-color-primary-100: 224 242 254;
  --tw-color-primary-200: 186 230 253;
  --tw-color-primary-300: 125 211 252;
  --tw-color-primary-400: 56 189 248;
  --tw-color-primary-500: 14 165 233;
  --tw-color-primary-600: 2 132 199;
  --tw-color-primary-700: 3 105 161;
  --tw-color-primary-800: 7 89 133;
  --tw-color-primary-900: 12 74 110;
  --tw-color-primary-950: 8 47 73;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f0f9ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #e0f2fe */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #bae6fd */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #7dd3fc */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #38bdf8 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #0ea5e9 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #0284c7 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #0369a1 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #075985 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #0c4a6e */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #082f49 */
}

.blue {
  --tw-color-primary-50: 239 246 255;
  --tw-color-primary-100: 219 234 254;
  --tw-color-primary-200: 191 219 254;
  --tw-color-primary-300: 147 197 253;
  --tw-color-primary-400: 96 165 250;
  --tw-color-primary-500: 59 130 246;
  --tw-color-primary-600: 37 99 235;
  --tw-color-primary-700: 29 78 216;
  --tw-color-primary-800: 30 64 175;
  --tw-color-primary-900: 30 58 138;
  --tw-color-primary-950: 23 37 84;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #eff6ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #dbeafe */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #bfdbfe */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #93c5fd */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #60a5fa */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #3b82f6 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #2563eb */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #1d4ed8 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #1e40af */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #1e3a8a */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #172554 */
}

.indigo {
  --tw-color-primary-50: 238 242 255;
  --tw-color-primary-100: 224 231 255;
  --tw-color-primary-200: 199 210 254;
  --tw-color-primary-300: 165 180 252;
  --tw-color-primary-400: 129 140 248;
  --tw-color-primary-500: 99 102 241;
  --tw-color-primary-600: 79 70 229;
  --tw-color-primary-700: 67 56 202;
  --tw-color-primary-800: 55 48 163;
  --tw-color-primary-900: 49 46 129;
  --tw-color-primary-950: 30 27 75;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #eef2ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #e0e7ff */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #c7d2fe */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #a5b4fc */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #818cf8 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #6366f1 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #4f46e5 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #4338ca */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #3730a3 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #312e81 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #1e1b4b */
}

.violet {
  --tw-color-primary-50: 245 243 255;
  --tw-color-primary-100: 237 233 254;
  --tw-color-primary-200: 221 214 254;
  --tw-color-primary-300: 196 181 253;
  --tw-color-primary-400: 167 139 250;
  --tw-color-primary-500: 139 92 246;
  --tw-color-primary-600: 124 58 237;
  --tw-color-primary-700: 109 40 217;
  --tw-color-primary-800: 91 33 182;
  --tw-color-primary-900: 76 29 149;
  --tw-color-primary-950: 46 16 101;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f5f3ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #ede9fe */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #ddd6fe */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #c4b5fd */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #a78bfa */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #8b5cf6 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #7c3aed */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #6d28d9 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #5b21b6 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #4c1d95 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #2e1065 */
}

.purple {
  --tw-color-primary-50: 250 245 255;
  --tw-color-primary-100: 243 232 255;
  --tw-color-primary-200: 233 213 255;
  --tw-color-primary-300: 216 180 254;
  --tw-color-primary-400: 192 132 252;
  --tw-color-primary-500: 168 85 247;
  --tw-color-primary-600: 147 51 234;
  --tw-color-primary-700: 126 34 206;
  --tw-color-primary-800: 107 33 168;
  --tw-color-primary-900: 88 28 135;
  --tw-color-primary-950: 59 7 100;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #faf5ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #f3e8ff */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #e9d5ff */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #d8b4fe */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #c084fc */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #a855f7 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #9333ea */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #7e22ce */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #6b21a8 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #581c87 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #3b0764 */
}

.fuchsia {
  --tw-color-primary-50: 253 244 255;
  --tw-color-primary-100: 250 232 255;
  --tw-color-primary-200: 245 208 254;
  --tw-color-primary-300: 240 171 252;
  --tw-color-primary-400: 232 121 249;
  --tw-color-primary-500: 217 70 239;
  --tw-color-primary-600: 192 38 211;
  --tw-color-primary-700: 162 28 175;
  --tw-color-primary-800: 134 25 143;
  --tw-color-primary-900: 112 26 117;
  --tw-color-primary-950: 74 4 78;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fdf4ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #fae8ff */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #f5d0fe */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #f0abfc */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #e879f9 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #d946ef */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #c026d3 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #a21caf */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #86198f */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #701a75 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #4a044e */
}

.pink {
  --tw-color-primary-50: 253 242 248;
  --tw-color-primary-100: 252 231 243;
  --tw-color-primary-200: 251 207 232;
  --tw-color-primary-300: 249 168 212;
  --tw-color-primary-400: 244 114 182;
  --tw-color-primary-500: 236 72 153;
  --tw-color-primary-600: 219 39 119;
  --tw-color-primary-700: 190 24 93;
  --tw-color-primary-800: 157 23 77;
  --tw-color-primary-900: 131 24 67;
  --tw-color-primary-950: 80 4 36;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fdf2f8 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #fce7f3 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fbcfe8 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #f9a8d4 */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #f472b6 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #ec4899 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #db2777 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #be185d */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #9d174d */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #831843 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #500724 */
}

.rose {
  --tw-color-primary-50: 255 241 242;
  --tw-color-primary-100: 255 228 230;
  --tw-color-primary-200: 254 205 211;
  --tw-color-primary-300: 253 164 175;
  --tw-color-primary-400: 251 113 133;
  --tw-color-primary-500: 244 63 94;
  --tw-color-primary-600: 225 29 72;
  --tw-color-primary-700: 190 18 60;
  --tw-color-primary-800: 159 18 57;
  --tw-color-primary-900: 136 19 55;
  --tw-color-primary-950: 76 5 25;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #fff1f2 */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #ffe4e6 */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #fecdd3 */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #fda4af */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #fb7185 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #f43f5e */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #e11d48 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #be123c */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #9f1239 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #881337 */
  --color-primary-950: rgb(var(--tw-color-primary-950)); /* #4c0519 */
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# next-sitemap
robots.txt
sitemap.xml
sitemap-*.xml


/.cursor
cursorrules.md
/memory-bank
</file>

<file path=".prettierignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
.next
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

# changelog
CHANGELOG.md

pnpm-lock.yaml
</file>

<file path="CHANGELOG.md">
<!-- //!STARTERCONF Remove this file, this is used as the starter changelog -->

# ts-nextjs-tailwind-starter changelog

This changelog is manually generated and not accurate with the package.json, only to show the changes since the last release.

## 1.0.0 - 2023-07-17

### New Features

- #### Next.js App Router

    Now uses the new app directory structure.

### Improvements & Bug Fixes

- #### Rename `clsxm` to `cn`

    For better support with shadcn/ui

- #### Faster Lint Actions
  
    Lint jobs is now merged into one for faster performance, also updated the concurrency rule

## 0.5.4 - 2022-07-22

### New Features

- #### Release Please

    Standard Version is now deprecated, and ts-nextjs-tailwind-starter is now using release please. Activate them on `.github/workflows/release-please`

### Improvements & Bug Fixes

- #### More Efficient Lint Actions
    
    Lint workflow is now cached and will cancel previous run if there are 2 concurrent runs.

## 0.5.3 - 2022-02-27

### New Features

- #### Shimmer for NextImage and Skeleton
    
    Addition of shimmer & blur placeholder for NextImage, and new Skeleton Component with shimmer effect.

    https://user-images.githubusercontent.com/55318172/155867729-8c3176ad-ede4-4443-b42b-780517615e5a.mp4


- #### Support for SVGR

    You can directly import SVG like

    ```tsx
    import Vercel from '~/svg/Vercel.svg';

    <Vercel className='text-5xl' />
    ```

- #### Public Folder Path Mapping

    Easily access public folder with `~/` prefix.

- #### Tailwind CSS Prettier Sorter

    ts-nextjs-tailwind-starter now use first-party plugin `prettier-plugin-tailwindcss`

### Improvements & Bug Fixes

- #### Layout Declared Twice

    Fix issue where adding elements to Layout ends up rendering them twice

- #### ESLint Curly Brace Rule

    New autofixable rule
    
    ```tsx
    props={'hi'}

    will become

    props='hi'
    ```

## 0.5.2 - 2021-12-30

### New Features

- #### New Component: PrimaryLink

    Add a link component with accent color on top of UnstyledLink.

### Improvements & Bug Fixes

- #### Unused Import ESlint Autofix

    Unused import will automatically be removed by the ESlint autofix.

- #### Renamed CustomLink to UnderlineLink

    This is to compensate the new PrimaryLink component

- #### Primary Button & ButtonLink Shade

    The shade of the button is now using the `500` instead of `400`.


## 0.5.1 - 2021-12-26

### New Features

- #### New Snippets Wrap: clsx and fragment `<></>`
    
    You can select text then wrap it with clsx or React.Fragment shorthand.
    
    https://user-images.githubusercontent.com/55318172/147401848-3db5dba0-ef71-4f25-9f47-c7908beba69e.mp4


## 0.5.0 - 2021-12-21

### New Features

- #### Expansion Pack
    You can easily add expansion such as React Hook Form + Components, Storybook, and more just using a single command line.

    https://user-images.githubusercontent.com/55318172/146631994-e1cac137-1664-4cfe-950b-a96decc1eaa6.mp4

    Check out the [expansion pack repository](https://github.com/theodorusclarence/expansion-pack) for the commands

### Improvements & Bug Fixes

- #### Can't Use Layout Fill on NextImage

    Using layout fill will make the width and height optional

- #### Vertically center Button & ButtonLink

    Adds `items-center` to make the button vertically centered


## 0.4.1 - 2021-12-12

### New Features

- #### Tailwind CSS v3
    
    The color palette configuration is also updated accordingly. 

## 0.4.0 - 2021-12-02

### New Features

- #### Button & ButtonLink Variants

    - New Variant: **Outline** and **Ghost**, you can also add `isDarkBg` prop if you are using these variants with dark background.
    - Animated Underline style on **Primary**, **Dark**, **Light** is removed
    - Added `ring-primary-500` on `focus-visible`

    ![Button Variants](https://user-images.githubusercontent.com/55318172/144385213-632b3e1f-9a0e-4184-82e0-7905ee3318b4.gif)

- #### ArrowLink


    Adds an animated arrow, this component is Polymorphic, the default element is `CustomLink`, you can extend it with `as` prop.

    ```tsx
    <ArrowLink
      as={ButtonLink}
      variant='light'
      href='/'
    >
      Register now
    </ArrowLink>
    ```

    ![Arrow Link Feature](https://user-images.githubusercontent.com/55318172/144385991-f3521d52-e0a8-49c5-8e87-409231fdd5b6.gif)

- #### Change default theme to white

    | ![Home Page](https://user-images.githubusercontent.com/55318172/144386763-00e6c3fd-ee2e-4c9e-87f8-18b036bdc2e1.png) | ![404](https://user-images.githubusercontent.com/55318172/144386764-0e4b4fb0-35a8-4725-a795-f998b06543a1.png) |
    | - | - |

### Improvements & Bug Fixes

- #### Split Next.js Link Props Type

    Now, to add props to Next.js `<Link>` component, you can use `nextLinkProps`.

    ```tsx
    <UnstyledLink 
      href='/'
      nextLinkProps={{
        shallow: true,
      }}
    >
      Link
    </UnstyledLink>
    ```

    The rest of `<a>` props can be directly added as a prop.

- #### Add Motion Safe to Animations

    All components animation respect user preference about motion.

## 0.3.0 - 2021-12-01

### New Features

- #### Create Branch & Auto Resolve Issue Actions

    | ![Create Branch Actions](https://user-images.githubusercontent.com/55318172/144379834-8c3e4d4f-d584-4253-9ad8-b9f1d468ed01.gif) <br> Auto Create Branch | ![Auto Resolve](https://user-images.githubusercontent.com/55318172/144382044-0132e755-9cd5-4805-a756-4086f67b3282.gif) <br> Auto Resolve  |
    | :--: | :--: |

    You have to install the app for your organization/account/repository from the [GitHub Marketplace](https://github.com/marketplace/create-issue-branch) for this to work.

    The branch will be created on **assign** with format `i${number}-${issue_title_lowercase}`.

- #### Custom Tailwind CSS Class Sorter

    Classes are sorted using [prettier-plugin-sort-class-names](https://github.com/PutziSan/prettier-plugin-sort-class-names) with custom class order on [this file](https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/prettier-plugin-sort-class-names-order) and custom variant order on [prettierrc](https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/.prettierrc.js)

    With this plugin, we can now safely check the order of the classes using the preconfigured lint action.

## 0.2.0 - 2021-11-10

### New Features

- #### Jest

    Jest is configured and will be run every push on Github Actions

- #### Lint Github Action

    1. **ESLint** - will fail if there are any warning and error.
    2. **Type Check** - will fail on `tsc` error.
    3. **Prettier Check** - will fail if there are any formatting error.
    4. **Test** - will fail if there are any test failure.

## 0.1.0

### New Features

- #### Installed Packages

    1. [clsx](https://bundlephobia.com/package/clsx@latest), utility for constructing `className` strings conditionally.
    2. [react-icons](https://bundlephobia.com/package/react-icons@latest), svg react icons of popular icon packs.

- #### UnstyledLink Component

    Used as a component for Next.js Link. Will render out Next/Link if the href started with `/` or `#`, else will render an `a` tag with `target='_blank'`. Also add a cursor style for outside links

- #### CustomLink Component

    ![customlink](https://user-images.githubusercontent.com/55318172/129183546-4e8c2059-0493-4459-a1e9-755fbd32fe39.gif)


- #### Absolute Import

    You can import without using relative path

    ```tsx
    import Nav from '../../../components/Nav';

    simplified to

    import Nav from '@/components/Nav';
    ```

- #### Seo Component

    Configure the default in `src/components/Seo.tsx`. If you want to use the default, just add `<Seo />` on top of your page.

    You can also customize it per page by overriding the title, description as props

    ```tsx
    <Seo title='Next.js Tailwind Starter' description='your description' />
    ```

    or if you want to still keep the title like `%s | Next.js Tailwind Starter`, you can use `templateTitle` props.

- #### Custom 404 Page

![404](https://user-images.githubusercontent.com/55318172/129184274-d90631f2-6688-4ed2-bef2-a4d018a4863c.gif)

- #### Workspace Snippets

Snippets such as React import, useState, useEffect, React Component. [View more](/.vscode/typescriptreact.code-snippets)

- #### Husky, Prettier, Lint, and Commitlint Configured

    3 Husky hooks including:

    1. pre-commit, running `next lint` and format the code using prettier
    2. commit-msg, running commitlint to ensure the use of [Conventional Commit](https://theodorusclarence.com/library/conventional-commit-readme) for commit messages
    3. post-merge, running `yarn` every `git pull` or after merge to ensure all new packages are installed and ready to go

- #### Default Favicon Declaration

    Use [Favicon Generator](https://www.favicon-generator.org/) and then overwrite the files in `/public/favicon`

- #### Default Tailwind CSS Base Styles

    There are default styles for responsive heading sizes, and `.layout` to support a max-width for larger screen size. Find more about it on [my blog post](https://theodorusclarence.com/blog/tailwindcss-best-practice#1-using-layout-class-or-container)

- #### Open Graph Generator

    | ![image](https://user-images.githubusercontent.com/55318172/137617070-806a0509-84bd-4cae-a900-2ab17e418d8d.png) | ![image](https://user-images.githubusercontent.com/55318172/137617090-c24f684a-bfe5-41b6-8ba9-fa99bae5cadf.png) |
    | --------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |

    Open Graph is generated using [og.thcl.dev](https://og.thcl.dev), but please fork and self-host if your website is going to have a lot of traffic.

    Check out the [repository](https://github.com/theodorusclarence/og) to see the API parameters.

- #### Preloaded & Self Hosted Inter Fonts

    Inter fonts is a variable fonts that is self hosted and preloaded.

## Snippets

This starter is equipped with workspace-snippets, it is encouraged to use it, especially the `np` and `rc`

### Next.js Page

File inside `src/pages` will be the webpage route, there are 2 things that need to be added in Next.js page:

1. Seo component
2. Layout class to give constraint to viewport width. [Read more about layout class](https://theodorusclarence.com/blog/tailwindcss-best-practice#1-using-layout-class-or-container).

Snippets: `np`

```tsx
import * as React from 'react';
import Seo from '@/components/Seo';
export default function TestPage() {
  return (
    <>
      <Seo templateTitle='Test' />
      <main>
        <section className=''>
          <div className='layout'></div>
        </section>
      </main>
    </>
  );
}
```

### React Components

To make a new component, It is encouraged to use `export default function`. Because when we need to rename it, we only need to do it once.

Snippets: `rc`

```tsx
import * as React from 'react';
export default function Component() {
  return <div></div>;
}
```

#### Import React

Snippets: `ir`

```tsx
import * as React from 'react';
```

#### Import Next Image

Snippets: `imimg`

```tsx
import Image from 'next/image';
```

#### Import Next Link

Snippets: `iml`

```tsx
import Link from 'next/link';
```

#### useState Hook

Snippets: `us`

```tsx
const [state, setState] = React.useState(initialState);
```

#### useEffect Hook

Snippets: `uf`

```tsx
React.useEffect(() => {}, []);
```

#### useReducer Hook

Snippets: `ur`

```tsx
const [state, dispatch] = React.useReducer(someReducer, {});
```

#### useRef Hook

Snippets: `urf`

```tsx
const someRef = React.useRef();
```

#### Region Comment

It is really useful when we need to group code. It is also collapsible in VSCode

Snippets: `reg`

```tsx
//#region  //*============== FORM SUBMIT
//#endregion  //*============== FORM SUBMIT
```

You should also use [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments) extension.
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="jest.config.js">
// eslint-disable-next-line @typescript-eslint/no-var-requires
const nextJest = require('next/jest');

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  // Add more setup options before each test is run
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],

  // if using TypeScript with a baseUrl set to the root directory then you need the below for alias' to work
  moduleDirectories: ['node_modules', '<rootDir>/'],

  testEnvironment: 'jest-environment-jsdom',

  /**
   * Absolute imports and Module Path Aliases
   */
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^~/(.*)$': '<rootDir>/public/$1',
    '^.+\\.(svg)$': '<rootDir>/src/__mocks__/svg.tsx',
  },
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./public/*"]
    },
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"],
  "moduleResolution": ["node_modules", ".next", "node"]
}
</file>

<file path=".github/workflows/issue-autolink.yml">
name: 'Issue Autolink'
on:
  pull_request:
    types: [opened]

jobs:
  issue-links:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: tkt-actions/add-issue-links@v1.8.1
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          branch-prefix: 'i'
          resolve: 'true'
</file>

<file path="src/components/layout/Header.tsx">
import { Menu, X } from 'lucide-react';
import Link from 'next/link';
import React, { useState } from 'react';

export function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  return (
    <header className='bg-[#0B3D2E] text-white shadow-md'>
      <div className='container mx-auto px-4 py-4 flex justify-between items-center'>
        <Link href='/' className='font-bold text-xl'>
          Golf Tournament
        </Link>
        {/* Mobile menu button */}
        <button
          className='md:hidden'
          onClick={() => setIsMenuOpen(!isMenuOpen)}
        >
          {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
        {/* Desktop navigation */}
        <nav className='hidden md:flex space-x-6'>
          <Link href='/' className='hover:text-gray-200 transition-colors'>
            Home
          </Link>
          <Link
            href='/LeaderboardPage'
            className='hover:text-gray-200 transition-colors'
          >
            Leaderboard
          </Link>
          <Link
            href='/ScoreInputPage'
            className='hover:text-gray-200 transition-colors'
          >
            Enter Scores
          </Link>
          <Link
            href='/AdminTeamsPage'
            className='hover:text-gray-200 transition-colors'
          >
            Admin
          </Link>
          <Link
            href='/login'
            className='bg-white text-[#0B3D2E] px-4 py-1 rounded hover:bg-gray-100 transition-colors'
          >
            Login
          </Link>
        </nav>
      </div>
      {/* Mobile navigation */}
      {isMenuOpen && (
        <nav className='md:hidden px-4 py-2 pb-4 flex flex-col space-y-3 bg-[#0B3D2E] border-t border-[#0a3528]'>
          <Link href='/' className='hover:text-gray-200 transition-colors'>
            Home
          </Link>
          <Link
            href='/LeaderboardPage'
            className='hover:text-gray-200 transition-colors'
          >
            Leaderboard
          </Link>
          <Link
            href='/ScoreInputPage'
            className='hover:text-gray-200 transition-colors'
          >
            Enter Scores
          </Link>
          <Link
            href='/AdminTeamsPage'
            className='hover:text-gray-200 transition-colors'
          >
            Admin
          </Link>
          <Link
            href='/login'
            className='bg-white text-[#0B3D2E] px-4 py-2 rounded text-center hover:bg-gray-100 transition-colors'
          >
            Login
          </Link>
        </nav>
      )}
    </header>
  );
}
</file>

<file path="src/components/layout/Layout.tsx">
import React from 'react';

import { Footer } from './Footer';
import { Header } from './Header';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className='flex flex-col min-h-screen bg-gray-100'>
      <Header />
      <main className='flex-grow'>{children}</main>
      <Footer />
    </div>
  );
};

export default Layout;
</file>

<file path="src/components/links/UnderlineLink.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

import UnstyledLink, {
  UnstyledLinkProps,
} from '@/components/links/UnstyledLink';

const UnderlineLink = React.forwardRef<HTMLAnchorElement, UnstyledLinkProps>(
  ({ children, className, ...rest }, ref) => {
    return (
      <UnstyledLink
        ref={ref}
        {...rest}
        className={cn(
          'animated-underline custom-link inline-flex items-center font-medium',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:rounded focus-visible:ring focus-visible:ring-offset-2',
          'border-dark border-b border-dotted hover:border-black/0',
          className
        )}
      >
        {children}
      </UnstyledLink>
    );
  }
);

export default UnderlineLink;
</file>

<file path="src/components/NextImage.tsx">
import Image, { ImageProps } from 'next/image';
import * as React from 'react';

import { cn } from '@/lib/utils';

type NextImageProps = {
  useSkeleton?: boolean;
  classNames?: {
    image?: string;
    blur?: string;
  };
  alt: string;
} & (
  | { width: string | number; height: string | number }
  | { layout: 'fill'; width?: string | number; height?: string | number }
) &
  ImageProps;

/**
 *
 * @description Must set width using `w-` className
 * @param useSkeleton add background with pulse animation, don't use it if image is transparent
 */
export default function NextImage({
  useSkeleton = false,
  src,
  width,
  height,
  alt,
  className,
  classNames,
  ...rest
}: NextImageProps) {
  const [status, setStatus] = React.useState(
    useSkeleton ? 'loading' : 'complete'
  );
  const widthIsSet = className?.includes('w-') ?? false;

  return (
    <figure
      style={!widthIsSet ? { width: `${width}px` } : undefined}
      className={className}
    >
      <Image
        className={cn(
          classNames?.image,
          status === 'loading' && cn('animate-pulse', classNames?.blur)
        )}
        src={src}
        width={width}
        height={height}
        alt={alt}
        onLoadingComplete={() => setStatus('complete')}
        {...rest}
      />
    </figure>
  );
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/pages/_app.tsx">
import type { AppProps } from 'next/app';

import '../styles/globals.css'; // Path relative to src/pages

function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}

export default MyApp;
</file>

<file path="src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* #region  /**=========== Primary Color =========== */
  /* !STARTERCONF Customize these variable, copy and paste from /styles/colors.css for list of colors */
  --tw-color-primary-50: 240 249 255;
  --tw-color-primary-100: 224 242 254;
  --tw-color-primary-200: 186 230 253;
  --tw-color-primary-300: 125 211 252;
  --tw-color-primary-400: 56 189 248;
  --tw-color-primary-500: 14 165 233;
  --tw-color-primary-600: 2 132 199;
  --tw-color-primary-700: 3 105 161;
  --tw-color-primary-800: 7 89 133;
  --tw-color-primary-900: 12 74 110;
  --color-primary-50: rgb(var(--tw-color-primary-50)); /* #f0f9ff */
  --color-primary-100: rgb(var(--tw-color-primary-100)); /* #e0f2fe */
  --color-primary-200: rgb(var(--tw-color-primary-200)); /* #bae6fd */
  --color-primary-300: rgb(var(--tw-color-primary-300)); /* #7dd3fc */
  --color-primary-400: rgb(var(--tw-color-primary-400)); /* #38bdf8 */
  --color-primary-500: rgb(var(--tw-color-primary-500)); /* #0ea5e9 */
  --color-primary-600: rgb(var(--tw-color-primary-600)); /* #0284c7 */
  --color-primary-700: rgb(var(--tw-color-primary-700)); /* #0369a1 */
  --color-primary-800: rgb(var(--tw-color-primary-800)); /* #075985 */
  --color-primary-900: rgb(var(--tw-color-primary-900)); /* #0c4a6e */
  /* #endregion  /**======== Primary Color =========== */
}

@layer base {
  /* inter var - latin */
  @font-face {
    font-family: 'Inter';
    font-style: normal;
    font-weight: 100 900;
    font-display: block;
    src: url('/fonts/inter-var-latin.woff2') format('woff2');
    unicode-range:
      U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
      U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
      U+FEFF, U+FFFD;
  }

  .cursor-newtab {
    cursor:
      url('/images/new-tab.png') 10 10,
      pointer;
  }

  /* #region  /**=========== Typography =========== */
  .h0 {
    @apply font-primary text-3xl font-bold md:text-5xl;
  }

  h1,
  .h1 {
    @apply font-primary text-2xl font-bold md:text-4xl;
  }

  h2,
  .h2 {
    @apply font-primary text-xl font-bold md:text-3xl;
  }

  h3,
  .h3 {
    @apply font-primary text-lg font-bold md:text-2xl;
  }

  h4,
  .h4 {
    @apply font-primary text-base font-bold md:text-lg;
  }

  body,
  .p {
    @apply font-primary text-sm md:text-base;
  }
  /* #endregion  /**======== Typography =========== */

  .layout {
    /* 1100px */
    max-width: 68.75rem;
    @apply mx-auto w-11/12;
  }

  .bg-dark a.custom-link {
    @apply border-gray-200 hover:border-gray-200/0;
  }

  /* Class to adjust with sticky footer */
  .min-h-main {
    @apply min-h-[calc(100vh-56px)];
  }
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;
    --ring: 215 20.2% 65.1%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;
    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;
    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;
    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;
    --border: 216 34% 17%;
    --input: 216 34% 17%;
    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
    --ring: 216 34% 17%;
    --radius: 0.5rem;
  }
}

@layer utilities {
  .animated-underline {
    background-image:
      linear-gradient(#33333300, #33333300),
      linear-gradient(
        to right,
        var(--color-primary-400),
        var(--color-primary-500)
      );
    background-size:
      100% 2px,
      0 2px;
    background-position:
      100% 100%,
      0 100%;
    background-repeat: no-repeat;
  }
  @media (prefers-reduced-motion: no-preference) {
    .animated-underline {
      transition: 0.3s ease;
      transition-property:
        background-size, color, background-color, border-color;
    }
  }
  .animated-underline:hover,
  .animated-underline:focus-visible {
    background-size:
      0 2px,
      100% 2px;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings:
      'rlig' 1,
      'calt' 1;
  }
}
</file>

<file path=".npmrc">
enable-pre-post-scripts=true
</file>

<file path=".nvmrc">
v20.10.0
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';
import defaultTheme from 'tailwindcss/defaultTheme';

export default {
  darkMode: ['class'],
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        primary: ['Inter', ...defaultTheme.fontFamily.sans],
      },
      colors: {
        primary: {
          '50': 'rgb(var(--tw-color-primary-50) / <alpha-value>)',
          '100': 'rgb(var(--tw-color-primary-100) / <alpha-value>)',
          '200': 'rgb(var(--tw-color-primary-200) / <alpha-value>)',
          '300': 'rgb(var(--tw-color-primary-300) / <alpha-value>)',
          '400': 'rgb(var(--tw-color-primary-400) / <alpha-value>)',
          '500': 'rgb(var(--tw-color-primary-500) / <alpha-value>)',
          '600': 'rgb(var(--tw-color-primary-600) / <alpha-value>)',
          '700': 'rgb(var(--tw-color-primary-700) / <alpha-value>)',
          '800': 'rgb(var(--tw-color-primary-800) / <alpha-value>)',
          '900': 'rgb(var(--tw-color-primary-900) / <alpha-value>)',
          '950': 'rgb(var(--tw-color-primary-950) / <alpha-value>)',
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        dark: '#222222',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      keyframes: {
        flicker: {
          '0%, 19.999%, 22%, 62.999%, 64%, 64.999%, 70%, 100%': {
            opacity: '0.99',
            filter:
              'drop-shadow(0 0 1px rgba(252, 211, 77)) drop-shadow(0 0 15px rgba(245, 158, 11)) drop-shadow(0 0 1px rgba(252, 211, 77))',
          },
          '20%, 21.999%, 63%, 63.999%, 65%, 69.999%': {
            opacity: '0.4',
            filter: 'none',
          },
        },
        shimmer: {
          '0%': {
            backgroundPosition: '-700px 0',
          },
          '100%': {
            backgroundPosition: '700px 0',
          },
        },
      },
      animation: {
        flicker: 'flicker 3s linear infinite',
        shimmer: 'shimmer 1.3s linear infinite',
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
    },
  },
  plugins: [require('@tailwindcss/forms'), require('tailwindcss-animate')],
} satisfies Config;
</file>

<file path="src/pages/index.tsx">
import React from 'react';

import { Hero } from '../components/home/Hero';
// import { TournamentInfo } from '../components/home/TournamentInfo' // Keep import for now
import Layout from '../components/layout/Layout';

export function HomePage() {
  return (
    <Layout>
      <div className='w-full'>
        <Hero />
        {/* <TournamentInfo /> */} {/* Comment out usage */}
      </div>
    </Layout>
  );
}

export default HomePage;
</file>

<file path=".github/workflows/lint.yml">
name: Code Check
on:
  push:
    branches:
      - main
  pull_request: {}

concurrency:
  group: ${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: ⬣ ESLint, ʦ TypeScript, 💅 Prettier, and 🃏 Test
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🤌 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📥 Download deps
        run: pnpm install --frozen-lockfile

      - name: 🔬 Lint
        run: pnpm run lint:strict

      - name: 🔎 Type check
        run: pnpm run typecheck

      - name: 💅 Prettier check
        run: pnpm run format:check

      - name: 🃏 Run jest
        run: pnpm run test
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    dirs: ['src'],
  },

  reactStrictMode: true,
  swcMinify: true,

  // Uncoment to add domain whitelist
  // images: {
  //   remotePatterns: [
  //     {
  //       protocol: 'https',
  //       hostname: 'res.cloudinary.com',
  //     },
  //   ]
  // },

  webpack(config) {
    // Grab the existing rule that handles SVG imports
    const fileLoaderRule = config.module.rules.find((rule) =>
      rule.test?.test?.('.svg')
    );

    config.module.rules.push(
      // Reapply the existing rule, but only for svg imports ending in ?url
      {
        ...fileLoaderRule,
        test: /\.svg$/i,
        resourceQuery: /url/, // *.svg?url
      },
      // Convert all other *.svg imports to React components
      {
        test: /\.svg$/i,
        issuer: { not: /\.(css|scss|sass)$/ },
        resourceQuery: { not: /url/ }, // exclude if *.svg?url
        loader: '@svgr/webpack',
        options: {
          dimensions: false,
          titleProp: true,
        },
      }
    );

    // Modify the file loader rule to ignore *.svg, since we have it handled now.
    fileLoaderRule.exclude = /\.svg$/i;

    return config;
  },
};

module.exports = nextConfig;
</file>

<file path="src/components/buttons/TextButton.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const TextButtonVariant = ['primary', 'basic'] as const;

type TextButtonProps = {
  variant?: (typeof TextButtonVariant)[number];
} & React.ComponentPropsWithRef<'button'>;

const TextButton = React.forwardRef<HTMLButtonElement, TextButtonProps>(
  (
    {
      children,
      className,
      variant = 'primary',
      disabled: buttonDisabled,
      ...rest
    },
    ref
  ) => {
    return (
      <button
        ref={ref}
        type='button'
        disabled={buttonDisabled}
        className={cn(
          'button inline-flex items-center justify-center font-semibold',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:ring',
          'transition duration-100',
          //#region  //*=========== Variant ===========
          variant === 'primary' && [
            'text-primary-500 hover:text-primary-600 active:text-primary-700',
            'disabled:text-primary-200',
          ],
          variant === 'basic' && [
            'text-black hover:text-gray-600 active:text-gray-800',
            'disabled:text-gray-300',
          ],
          //#endregion  //*======== Variant ===========
          'disabled:cursor-not-allowed disabled:brightness-105 disabled:hover:underline',
          className
        )}
        {...rest}
      >
        {children}
      </button>
    );
  }
);

export default TextButton;
</file>

<file path="src/components/links/PrimaryLink.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

import UnstyledLink, {
  UnstyledLinkProps,
} from '@/components/links/UnstyledLink';

const PrimaryLinkVariant = ['primary', 'basic'] as const;
type PrimaryLinkProps = {
  variant?: (typeof PrimaryLinkVariant)[number];
} & UnstyledLinkProps;

const PrimaryLink = React.forwardRef<HTMLAnchorElement, PrimaryLinkProps>(
  ({ className, children, variant = 'primary', ...rest }, ref) => {
    return (
      <UnstyledLink
        ref={ref}
        {...rest}
        className={cn(
          'inline-flex items-center',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:rounded focus-visible:ring focus-visible:ring-offset-2',
          'font-medium',
          //#region  //*=========== Variant ===========
          variant === 'primary' && [
            'text-primary-500 hover:text-primary-600 active:text-primary-700',
            'disabled:text-primary-200',
          ],
          variant === 'basic' && [
            'text-black hover:text-gray-600 active:text-gray-800',
            'disabled:text-gray-300',
          ],
          //#endregion  //*======== Variant ===========
          className
        )}
      >
        {children}
      </UnstyledLink>
    );
  }
);

export default PrimaryLink;
</file>

<file path="src/components/buttons/Button.tsx">
import { LucideIcon } from 'lucide-react';
import * as React from 'react';
import { IconType } from 'react-icons';
import { ImSpinner2 } from 'react-icons/im';

import { cn } from '@/lib/utils';

const ButtonVariant = ['primary', 'outline', 'ghost', 'light', 'dark'] as const;
const ButtonSize = ['sm', 'base'] as const;

type ButtonProps = {
  isLoading?: boolean;
  isDarkBg?: boolean;
  variant?: (typeof ButtonVariant)[number];
  size?: (typeof ButtonSize)[number];
  leftIcon?: IconType | LucideIcon;
  rightIcon?: IconType | LucideIcon;
  classNames?: {
    leftIcon?: string;
    rightIcon?: string;
  };
} & React.ComponentPropsWithRef<'button'>;

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      children,
      className,
      disabled: buttonDisabled,
      isLoading,
      variant = 'primary',
      size = 'base',
      isDarkBg = false,
      leftIcon: LeftIcon,
      rightIcon: RightIcon,
      classNames,
      ...rest
    },
    ref
  ) => {
    const disabled = isLoading || buttonDisabled;

    return (
      <button
        ref={ref}
        type='button'
        disabled={disabled}
        className={cn(
          'inline-flex items-center rounded font-medium',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:ring',
          'shadow-sm',
          'transition-colors duration-75',
          //#region  //*=========== Size ===========
          [
            size === 'base' && ['px-3 py-1.5', 'text-sm md:text-base'],
            size === 'sm' && ['px-2 py-1', 'text-xs md:text-sm'],
          ],
          //#endregion  //*======== Size ===========
          //#region  //*=========== Variants ===========
          [
            variant === 'primary' && [
              'bg-primary-500 text-white',
              'border-primary-600 border',
              'hover:bg-primary-600 hover:text-white',
              'active:bg-primary-700',
              'disabled:bg-primary-700',
            ],
            variant === 'outline' && [
              'text-primary-500',
              'border-primary-500 border',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'ghost' && [
              'text-primary-500',
              'shadow-none',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'light' && [
              'bg-white text-gray-700',
              'border border-gray-300',
              'hover:text-dark hover:bg-gray-100',
              'active:bg-white/80 disabled:bg-gray-200',
            ],
            variant === 'dark' && [
              'bg-gray-900 text-white',
              'border border-gray-600',
              'hover:bg-gray-800 active:bg-gray-700 disabled:bg-gray-700',
            ],
          ],
          //#endregion  //*======== Variants ===========
          'disabled:cursor-not-allowed',
          isLoading &&
            'relative text-transparent transition-none hover:text-transparent disabled:cursor-wait',
          className
        )}
        {...rest}
      >
        {isLoading && (
          <div
            className={cn(
              'absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',
              {
                'text-white': ['primary', 'dark'].includes(variant),
                'text-black': ['light'].includes(variant),
                'text-primary-500': ['outline', 'ghost'].includes(variant),
              }
            )}
          >
            <ImSpinner2 className='animate-spin' />
          </div>
        )}
        {LeftIcon && (
          <div
            className={cn([
              size === 'base' && 'mr-1',
              size === 'sm' && 'mr-1.5',
            ])}
          >
            <LeftIcon
              size='1em'
              className={cn(
                [
                  size === 'base' && 'md:text-md text-md',
                  size === 'sm' && 'md:text-md text-sm',
                ],
                classNames?.leftIcon
              )}
            />
          </div>
        )}
        {children}
        {RightIcon && (
          <div
            className={cn([
              size === 'base' && 'ml-1',
              size === 'sm' && 'ml-1.5',
            ])}
          >
            <RightIcon
              size='1em'
              className={cn(
                [
                  size === 'base' && 'text-md md:text-md',
                  size === 'sm' && 'md:text-md text-sm',
                ],
                classNames?.rightIcon
              )}
            />
          </div>
        )}
      </button>
    );
  }
);

export default Button;
</file>

<file path="src/components/buttons/IconButton.tsx">
import { LucideIcon } from 'lucide-react';
import * as React from 'react';
import { IconType } from 'react-icons';
import { ImSpinner2 } from 'react-icons/im';

import { cn } from '@/lib/utils';

const IconButtonVariant = [
  'primary',
  'outline',
  'ghost',
  'light',
  'dark',
] as const;

type IconButtonProps = {
  isLoading?: boolean;
  isDarkBg?: boolean;
  variant?: (typeof IconButtonVariant)[number];
  icon?: IconType | LucideIcon;
  classNames?: {
    icon?: string;
  };
} & React.ComponentPropsWithRef<'button'>;

const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(
  (
    {
      className,
      disabled: buttonDisabled,
      isLoading,
      variant = 'primary',
      isDarkBg = false,
      icon: Icon,
      classNames,
      ...rest
    },
    ref
  ) => {
    const disabled = isLoading || buttonDisabled;

    return (
      <button
        ref={ref}
        type='button'
        disabled={disabled}
        className={cn(
          'inline-flex items-center justify-center rounded font-medium',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:ring',
          'shadow-sm',
          'transition-colors duration-75',
          'min-h-[28px] min-w-[28px] p-1 md:min-h-[34px] md:min-w-[34px] md:p-2',
          //#region  //*=========== Variants ===========
          [
            variant === 'primary' && [
              'bg-primary-500 text-white',
              'border-primary-600 border',
              'hover:bg-primary-600 hover:text-white',
              'active:bg-primary-700',
              'disabled:bg-primary-700',
            ],
            variant === 'outline' && [
              'text-primary-500',
              'border-primary-500 border',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'ghost' && [
              'text-primary-500',
              'shadow-none',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'light' && [
              'bg-white text-gray-700',
              'border border-gray-300',
              'hover:text-dark hover:bg-gray-100',
              'active:bg-white/80 disabled:bg-gray-200',
            ],
            variant === 'dark' && [
              'bg-gray-900 text-white',
              'border border-gray-600',
              'hover:bg-gray-800 active:bg-gray-700 disabled:bg-gray-700',
            ],
          ],
          //#endregion  //*======== Variants ===========
          'disabled:cursor-not-allowed',
          isLoading &&
            'relative text-transparent transition-none hover:text-transparent disabled:cursor-wait',
          className
        )}
        {...rest}
      >
        {isLoading && (
          <div
            className={cn(
              'absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',
              {
                'text-white': ['primary', 'dark'].includes(variant),
                'text-black': ['light'].includes(variant),
                'text-primary-500': ['outline', 'ghost'].includes(variant),
              }
            )}
          >
            <ImSpinner2 className='animate-spin' />
          </div>
        )}
        {Icon && <Icon size='1em' className={cn(classNames?.icon)} />}
      </button>
    );
  }
);

export default IconButton;
</file>

<file path="src/components/links/ButtonLink.tsx">
import { LucideIcon } from 'lucide-react';
import * as React from 'react';
import { IconType } from 'react-icons';

import { cn } from '@/lib/utils';

import UnstyledLink, {
  UnstyledLinkProps,
} from '@/components/links/UnstyledLink';

const ButtonLinkVariant = [
  'primary',
  'outline',
  'ghost',
  'light',
  'dark',
] as const;
const ButtonLinkSize = ['sm', 'base'] as const;

type ButtonLinkProps = {
  isDarkBg?: boolean;
  variant?: (typeof ButtonLinkVariant)[number];
  size?: (typeof ButtonLinkSize)[number];
  leftIcon?: IconType | LucideIcon;
  rightIcon?: IconType | LucideIcon;
  classNames?: {
    leftIcon?: string;
    rightIcon?: string;
  };
} & UnstyledLinkProps;

const ButtonLink = React.forwardRef<HTMLAnchorElement, ButtonLinkProps>(
  (
    {
      children,
      className,
      variant = 'primary',
      size = 'base',
      isDarkBg = false,
      leftIcon: LeftIcon,
      rightIcon: RightIcon,
      classNames,
      ...rest
    },
    ref
  ) => {
    return (
      <UnstyledLink
        ref={ref}
        {...rest}
        className={cn(
          'inline-flex items-center rounded font-medium',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:ring',
          'shadow-sm',
          'transition-colors duration-75',
          //#region  //*=========== Size ===========
          [
            size === 'base' && ['px-3 py-1.5', 'text-sm md:text-base'],
            size === 'sm' && ['px-2 py-1', 'text-xs md:text-sm'],
          ],
          //#endregion  //*======== Size ===========
          //#region  //*=========== Variants ===========
          [
            variant === 'primary' && [
              'bg-primary-500 text-white',
              'border-primary-600 border',
              'hover:bg-primary-600 hover:text-white',
              'active:bg-primary-700',
              'disabled:bg-primary-700',
            ],
            variant === 'outline' && [
              'text-primary-500',
              'border-primary-500 border',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'ghost' && [
              'text-primary-500',
              'shadow-none',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'light' && [
              'bg-white text-gray-700',
              'border border-gray-300',
              'hover:text-dark hover:bg-gray-100',
              'active:bg-white/80 disabled:bg-gray-200',
            ],
            variant === 'dark' && [
              'bg-gray-900 text-white',
              'border border-gray-600',
              'hover:bg-gray-800 active:bg-gray-700 disabled:bg-gray-700',
            ],
          ],
          //#endregion  //*======== Variants ===========
          'disabled:cursor-not-allowed',
          className
        )}
      >
        {LeftIcon && (
          <div
            className={cn([
              size === 'base' && 'mr-1',
              size === 'sm' && 'mr-1.5',
            ])}
          >
            <LeftIcon
              size='1em'
              className={cn(
                [
                  size === 'base' && 'md:text-md text-md',
                  size === 'sm' && 'md:text-md text-sm',
                ],
                classNames?.leftIcon
              )}
            />
          </div>
        )}
        {children}
        {RightIcon && (
          <div
            className={cn([
              size === 'base' && 'ml-1',
              size === 'sm' && 'ml-1.5',
            ])}
          >
            <RightIcon
              size='1em'
              className={cn(
                [
                  size === 'base' && 'text-md md:text-md',
                  size === 'sm' && 'md:text-md text-sm',
                ],
                classNames?.rightIcon
              )}
            />
          </div>
        )}
      </UnstyledLink>
    );
  }
);

export default ButtonLink;
</file>

<file path="src/components/links/IconLink.tsx">
import { LucideIcon } from 'lucide-react';
import * as React from 'react';
import { IconType } from 'react-icons';

import { cn } from '@/lib/utils';

import UnstyledLink, {
  UnstyledLinkProps,
} from '@/components/links/UnstyledLink';

const IconLinkVariant = [
  'primary',
  'outline',
  'ghost',
  'light',
  'dark',
] as const;

type IconLinkProps = {
  isDarkBg?: boolean;
  variant?: (typeof IconLinkVariant)[number];
  icon?: IconType | LucideIcon;
  classNames?: {
    icon?: string;
  };
} & Omit<UnstyledLinkProps, 'children'>;

const IconLink = React.forwardRef<HTMLAnchorElement, IconLinkProps>(
  (
    {
      className,
      icon: Icon,
      variant = 'outline',
      isDarkBg = false,
      classNames,
      ...rest
    },
    ref
  ) => {
    return (
      <UnstyledLink
        ref={ref}
        type='button'
        className={cn(
          'inline-flex items-center justify-center rounded font-medium',
          'focus-visible:ring-primary-500 focus:outline-none focus-visible:ring',
          'shadow-sm',
          'transition-colors duration-75',
          'min-h-[28px] min-w-[28px] p-1 md:min-h-[34px] md:min-w-[34px] md:p-2',
          //#region  //*=========== Variants ===========
          [
            variant === 'primary' && [
              'bg-primary-500 text-white',
              'border-primary-600 border',
              'hover:bg-primary-600 hover:text-white',
              'active:bg-primary-700',
              'disabled:bg-primary-700',
            ],
            variant === 'outline' && [
              'text-primary-500',
              'border-primary-500 border',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'ghost' && [
              'text-primary-500',
              'shadow-none',
              'hover:bg-primary-50 active:bg-primary-100 disabled:bg-primary-100',
              isDarkBg &&
                'hover:bg-gray-900 active:bg-gray-800 disabled:bg-gray-800',
            ],
            variant === 'light' && [
              'bg-white text-gray-700',
              'border border-gray-300',
              'hover:text-dark hover:bg-gray-100',
              'active:bg-white/80 disabled:bg-gray-200',
            ],
            variant === 'dark' && [
              'bg-gray-900 text-white',
              'border border-gray-600',
              'hover:bg-gray-800 active:bg-gray-700 disabled:bg-gray-700',
            ],
          ],
          //#endregion  //*======== Variants ===========
          'disabled:cursor-not-allowed',
          className
        )}
        {...rest}
      >
        {Icon && <Icon size='1em' className={cn(classNames?.icon)} />}
      </UnstyledLink>
    );
  }
);

export default IconLink;
</file>

<file path="README.md">
# Next.js + Tailwind CSS + TypeScript Starter and Boilerplate

<div align="center">
  <h2>🔋 ts-nextjs-tailwind-starter</h2>
  <p>Next.js + Tailwind CSS + TypeScript starter packed with useful development features.</p>
  <p>Made by <a href="https://theodorusclarence.com">Theodorus Clarence</a></p>

[![GitHub Repo stars](https://img.shields.io/github/stars/theodorusclarence/ts-nextjs-tailwind-starter)](https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/stargazers)
[![Depfu](https://badges.depfu.com/badges/fc6e730632ab9dacaf7df478a08684a7/overview.svg)](https://depfu.com/github/theodorusclarence/ts-nextjs-tailwind-starter?project_id=30160)
[![Last Update](https://img.shields.io/badge/deps%20update-every%20sunday-blue.svg)](https://shields.io/)

</div>

## Features

This repository is 🔋 battery packed with:

- ⚡️ Next.js 14 with App Router
- ⚛️ React 18
- ✨ TypeScript
- 💨 Tailwind CSS 3 — Configured with CSS Variables to extend the **primary** color
- 💎 Pre-built Components — Components that will **automatically adapt** with your brand color, [check here for the demo](https://tsnext-tw.thcl.dev/components)
- 🃏 Jest — Configured for unit testing
- 📈 Absolute Import and Path Alias — Import components using `@/` prefix
- 📏 ESLint — Find and fix problems in your code, also will **auto sort** your imports
- 💖 Prettier — Format your code consistently
- 🐶 Husky & Lint Staged — Run scripts on your staged files before they are committed
- 🤖 Conventional Commit Lint — Make sure you & your teammates follow conventional commit
- ⏰ Release Please — Generate your changelog by activating the `release-please` workflow
- 👷 Github Actions — Lint your code on PR
- 🚘 Automatic Branch and Issue Autolink — Branch will be automatically created on issue **assign**, and auto linked on PR
- 🔥 Snippets — A collection of useful snippets
- 👀 Open Graph Helper Function — Awesome open graph generated using [og](https://github.com/theodorusclarence/og), fork it and deploy!
- 🗺 Site Map — Automatically generate sitemap.xml
- 📦 Expansion Pack — Easily install common libraries, additional components, and configs.

See the 👉 [feature details and changelog](https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/CHANGELOG.md) 👈 for more.

You can also check all of the **details and demos** on my blog post:

- [One-stop Starter to Maximize Efficiency on Next.js & Tailwind CSS Projects](https://theodorusclarence.com/blog/one-stop-starter)

## Getting Started

### 1. Clone this template using one of the three ways

1. Use this repository as template

   **Disclosure:** by using this repository as a template, there will be an attribution on your repository.

   I'll appreciate if you do, so this template can be known by others too 😄

   ![Use as template](https://user-images.githubusercontent.com/55318172/129183039-1a61e68d-dd90-4548-9489-7b3ccbb35810.png)

2. Using `create-next-app`

   ```bash
   pnpm create next-app  -e https://github.com/theodorusclarence/ts-nextjs-tailwind-starter ts-pnpm
   ```

   If you still want to use **pages directory** (_is not actively maintained_) you can use this command

   ```bash
   npx create-next-app -e https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/tree/pages-directory project-name
   ```

3. Using `degit`

   ```bash
   npx degit theodorusclarence/ts-nextjs-tailwind-starter YOUR_APP_NAME
   ```

4. Deploy to Vercel

   [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Ftheodorusclarence%2Fts-nextjs-tailwind-starter)

### 2. Install dependencies

It is encouraged to use **pnpm** so the husky hooks can work properly.

```bash
pnpm install
```

### 3. Run the development server

You can start the server using this command:

```bash
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result. You can start editing the page by modifying `src/pages/index.tsx`.

### 4. Change defaults

There are some things you need to change including title, urls, favicons, etc.

Find all comments with !STARTERCONF, then follow the guide.

Don't forget to change the package name in package.json

### 5. Commit Message Convention

This starter is using [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/), it is mandatory to use it to commit changes.

## Projects using ts-nextjs-tailwind-starter

<!--
TEMPLATE
- [sitename](https://sitelink.com) ([Source](https://github.com/githublink))
- [sitename](https://sitelink.com)
-->

- [theodorusclarence.com](https://theodorusclarence.com) ([Source](https://github.com/theodorusclarence/theodorusclarence.com))
- [Notiolink](https://notiolink.thcl.dev/) ([Source](https://github.com/theodorusclarence/notiolink))
- [NextJs + Materia UI + Typescript](https://github.com/AlexStack/nextjs-materia-mui-typescript-hook-form-scaffold-boilerplate-starter)

Are you using this starter? Please add your page (and repo) to the end of the list via a [Pull Request](https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/edit/main/README.md). 😃

## Expansion Pack 📦

This starter is now equipped with an [expansion pack](https://github.com/theodorusclarence/expansion-pack).

You can easily add expansion such as React Hook Form + Components, Storybook, and more just using a single command line.

<https://user-images.githubusercontent.com/55318172/146631994-e1cac137-1664-4cfe-950b-a96decc1eaa6.mp4>

Check out the [expansion pack repository](https://github.com/theodorusclarence/expansion-pack) for the commands

### App Router Update

Due to App Router update, the expansion pack is currently **outdated**. It will be updated in the future. You can still use them by copy and pasting the files.
</file>

<file path="package.json">
{
  "name": "ts-nextjs-tailwind-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "eslint src --fix && pnpm format",
    "lint:strict": "eslint --max-warnings=0 src",
    "typecheck": "tsc --noEmit --incremental false",
    "test:watch": "jest --watch",
    "test": "jest",
    "format": "prettier -w .",
    "format:check": "prettier -c .",
    "postbuild": "next-sitemap --config next-sitemap.config.js",
    "prepare": "husky install"
  },
  "dependencies": {
    "@radix-ui/react-select": "^2.1.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.438.0",
    "next": "^14.2.23",
    "react": "^18.3.1",
    "react-dom": "^18.2.0",
    "react-icons": "^5.4.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@commitlint/cli": "^16.3.0",
    "@commitlint/config-conventional": "^16.2.4",
    "@ianvs/prettier-plugin-sort-imports": "^4.4.1",
    "@svgr/webpack": "^8.1.0",
    "@tailwindcss/forms": "^0.5.10",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^15.0.7",
    "@types/react": "^18.3.20",
    "@types/testing-library__jest-dom": "^5.14.9",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-config-next": "^14.2.23",
    "eslint-config-prettier": "^8.10.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "eslint-plugin-unused-imports": "^2.0.0",
    "husky": "^7.0.4",
    "jest": "^27.5.1",
    "lint-staged": "^12.5.0",
    "next-router-mock": "^0.9.0",
    "next-sitemap": "^2.5.28",
    "postcss": "^8.5.1",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^3.4.17",
    "typescript": "^4.9.5"
  },
  "lint-staged": {
    "**/*.{js,jsx,ts,tsx}": [
      "eslint --max-warnings=0",
      "prettier -w"
    ],
    "**/*.{json,css,scss,md,webmanifest}": [
      "prettier -w"
    ]
  }
}
</file>

</files>
